{"version":3,"sources":["actions/ships.js","actions/types.js","components/Header.js","actions/points.js","components/Points.js","components/pickers/Allies.js","components/pickers/Axis.js","components/lists/AddShips.js","components/lists/ShipsShown.js","components/lists/PDFDownload.js","components/lists/AlliesList.js","components/lists/AxisList.js","components/AddtoDB.js","reducers/userSelections.js","reducers/factionPoints.js","reducers/shipsInPlay.js","reducers/allShips.js","reducers/index.js","reducers/points.js","store.js","App.js","components/TestPDF.js","index.js"],"names":["axios","require","loadOneShip","ship","faction","dispatch","payload","type","updateOneShip","connect","loadAllShips","a","post","ships","headers","shipsAllies","shipsAxis","data","axis","allies","useEffect","className","setFactionPoints","point","state","points","allShips","userSelection","alliesPoints","factionPoints","axisPoints","shipsInPlay","setPoints","removeShips","useState","currPoints","updatePoints","value","name","onChange","e","target","changePoints","placeholder","onClick","alliesNegativeCounter","forEach","locked","shipFound","filter","allShip","shipList","axisNegativeCounter","shipNation","nation","indexOf","iterCount","index","Math","floor","random","length","splice","currQuant","shipExistence","console","log","shipMax","number_available","push","secretName","generateShips","alliesAddAmount","axisAddAmount","resetShips","addShips","props","inputStates","$","each","i","this","attr","click","parseInt","prop","country","parent","text","id","aria-checked","Axis","maxPoints","updateShips","displayShips","updateDisplay","displayArray","axis_nations","shipArray","getShips","Object","keys","class","tempArr","classOrder","sort","ship1","ship2","updateDisplayArray","displayShip","relevantShips","shipName","parentNode","querySelector","textContent","shipInPlay","shipPoints","maxQuant","map","key","DBShip","total","alliesShips","axisShips","toggleLock","removeOneShip","shipInfo","alliesArray","axisArray","toggleCheckAllies","Array","from","classList","getAttribute","input","checked","toggleCheckAxis","deleteSingleShip","shipIdentifier","split","join","currShip","document","querySelectorAll","allyShip","axisShip","image","src","alt","crossOrigin","styles","StyleSheet","create","page","flexDirection","headSection","width","display","justifyContent","padding","fontSize","section","alignItems","flexWrap","margin","marginLeft","pageNumber","position","bottom","right","TestPDF","currentDate","Date","date","getDate","month","getMonth","year","getFullYear","onRender","size","style","fixed","sidePoints","totalPoints","substring","render","totalPages","height","shipsToSend","fileName","blob","url","loading","error","shipsLoaded","changeShips","units","shipProperties","updateProperties","updateLock","existingShip","updateExistingShip","deleteShip","updateDeleteShip","displayType","updateDisplayType","submitForm","preventDefault","config","body","newFormData","FormData","newMyFile","getElementById","files","append","newLink","put","alert","delete","formData","myFile","link","inputUpdate","updateChangeProps","ready","unbind","hasClass","removeClass","addClass","onSubmit","htmlFor","currShipInfo","changeTargetShip","for","changeDeleteShip","initialState","combineReducers","action","Number","removeOneShipArr","removeArr","toggleArr","stateArr","newQuant","quantity","middleware","thunk","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","App","flexGrow","ReactDOM"],"mappings":"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","file":"static/js/main.dc65fea8.chunk.js","sourcesContent":["import {\r\n    ADD_SHIP,\r\n    LOAD_IN_SHIPS,\r\n    LOAD_ONE_SHIP,\r\n    UPDATE_ONE_SHIP,\r\n    REMOVE_SHIP,\r\n    TOGGLE_LOCK,\r\n    REMOVE_ONE_SHIP\r\n} from './types';\r\n\r\nconst axios = require('axios');\r\n\r\nexport const addShips = shipList => dispatch => {\r\n    dispatch({\r\n        payload: shipList,\r\n        type: ADD_SHIP\r\n    });\r\n};\r\n\r\nexport const loadOneShip = (ship, faction) => dispatch => {\r\n    dispatch({\r\n        payload: {\r\n            ship,\r\n            faction\r\n        },\r\n        type: LOAD_ONE_SHIP\r\n    })\r\n}\r\n\r\nexport const updateOneShip = (ship, faction) => dispatch => {\r\n    dispatch({\r\n        payload: {\r\n            ship,\r\n            faction\r\n        },\r\n        type: UPDATE_ONE_SHIP\r\n    })\r\n}\r\nexport const removeShips = () => dispatch => {\r\n    dispatch({\r\n        payload: {\r\n        },\r\n        type: REMOVE_SHIP\r\n    })\r\n}\r\nexport const toggleLock = (ship, faction) => dispatch => {\r\n    dispatch({\r\n        payload: {\r\n            ship,\r\n            faction\r\n        },\r\n        type: TOGGLE_LOCK\r\n    });\r\n}\r\nexport const loadAllShips = () => async (dispatch) => {\r\n    let shipsAllies = await axios.post('/ships/selected', { faction: 'allies', ships: ['All'] }, { headers: { \"Content-Type\": 'application/json' } });\r\n    let shipsAxis = await axios.post('/ships/selected', { faction: 'axis', ships: ['All'] }, { headers: { \"Content-Type\": 'application/json' } });\r\n\r\n    shipsAllies = shipsAllies.data;\r\n    shipsAxis = shipsAxis.data;\r\n\r\n    dispatch({\r\n        payload: {\r\n            axis: shipsAxis,\r\n            allies: shipsAllies\r\n        },\r\n        type: LOAD_IN_SHIPS\r\n    })\r\n}\r\n\r\nexport const removeOneShip = (shipInfo) => async dispatch => {\r\n    console.log(shipInfo);\r\n    dispatch({\r\n        payload: shipInfo,\r\n        type: REMOVE_ONE_SHIP\r\n    })\r\n}","export const ADD_SHIP = 'ADD_SHIP';\r\nexport const DELETE_SHIP = 'DELETE_SHIP';\r\n\r\nexport const SET_POINTS = 'SET_POINTS';\r\nexport const SET_ALLIES_POINTS = 'SET_ALLIES_POINTS';\r\nexport const SET_AXIS_POINTS = 'SET_AXIS_POINTS';\r\n\r\nexport const LOAD_ONE_SHIP = 'LOAD_ONE_SHIP';\r\nexport const UPDATE_ONE_SHIP = 'UPDATE_ONE_SHIP';\r\n\r\nexport const INCREMENT_POINTS = 'INCREMENT_POINTS';\r\n\r\nexport const LOAD_IN_SHIPS = 'LOAD_IN_SHIPS';\r\n\r\nexport const REMOVE_SHIP = 'REMOVE_SHIP';\r\nexport const REMOVE_ONE_SHIP = 'REMOVE_ONE_SHIP';\r\n\r\nexport const RESET_POINTS = 'RESET_POINTS';\r\n\r\nexport const TOGGLE_LOCK = 'TOGGLE_LOCK';","import React, { useEffect } from 'react';\r\n\r\n\r\nimport { connect } from 'react-redux';\r\nimport { loadAllShips } from '../actions/ships';\r\nconst Header = ({ loadAllShips }) => {\r\n    useEffect(() => {\r\n        loadAllShips();\r\n    }, []);\r\n    return (\r\n        <div className=\"header\">\r\n            <span className=\"first-half\">\r\n                <b>War At Sea</b>\r\n            </span>\r\n            <span className=\"second-half\">\r\n                {\" \"}List Generator\r\n            </span>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default connect(null, { loadAllShips })(Header);","import {\r\n    SET_POINTS,\r\n    SET_ALLIES_POINTS,\r\n    SET_AXIS_POINTS,\r\n    RESET_POINTS\r\n} from './types';\r\n\r\nexport const setPoints = (point) => dispatch => {\r\n    dispatch({\r\n        payload: point,\r\n        type: SET_POINTS\r\n    })\r\n}\r\n\r\n\r\nexport const setFactionPoints = (faction, point) => dispatch => {\r\n    faction === 'allies' ?\r\n        dispatch({\r\n            payload: point,\r\n            type: SET_ALLIES_POINTS\r\n        })\r\n        :\r\n        dispatch({\r\n            payload: point,\r\n            type: SET_AXIS_POINTS\r\n        });\r\n}\r\n\r\nexport const resetPoints = (faction) => dispatch => {\r\n    dispatch({\r\n        payload: faction,\r\n        type: RESET_POINTS\r\n    });\r\n}","import React, { useState, useEffect } from 'react';\r\n\r\nimport { setPoints } from '../actions/points';\r\nimport { connect } from 'react-redux';\r\nimport { loadOneShip, updateOneShip, removeShips } from '../actions/ships';\r\nimport { setFactionPoints } from '../actions/points';\r\n//import shipsInPlay from '../reducers/shipsInPlay';\r\n\r\nconst Points = ({ setPoints, allShips, userSelection, alliesPoints, axisPoints, points, shipsInPlay, loadOneShip, updateOneShip, setFactionPoints, removeShips }) => {\r\n    const [currPoints, updatePoints] = useState('');\r\n\r\n    function changePoints(e) {\r\n\r\n        if (e && e.target.value) {\r\n            updatePoints(e.target.value);\r\n            points = e.target.value;\r\n        }\r\n        else if (e && !e.target.value) {\r\n            updatePoints('');\r\n            points = 0;\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        setPoints(currPoints);\r\n    }, [currPoints]);\r\n\r\n\r\n    function generateShips() {\r\n        let alliesNegativeCounter = 0;\r\n        shipsInPlay.allies.forEach(ship => {\r\n            if (ship.locked == false) {\r\n                let shipFound = allShips.filter(allShip => allShip.name === ship.name);\r\n                alliesNegativeCounter -= shipFound[0].points;\r\n                alliesPoints -= shipFound[0].points;\r\n            }\r\n        });\r\n        let axisNegativeCounter = 0;\r\n        shipsInPlay.axis.forEach(ship => {\r\n            if (ship.locked == false) {\r\n                let shipFound = allShips.filter(allShip => allShip.name === ship.name);\r\n                axisNegativeCounter -= shipFound[0].points;\r\n                axisPoints -= shipFound[0].points;\r\n            }\r\n        });\r\n        setFactionPoints('allies', alliesNegativeCounter);\r\n        setFactionPoints('axis', axisNegativeCounter);\r\n        removeShips();\r\n        //update shipsInPlay\r\n        let shipList;\r\n        if (userSelection.allies[0] === 'All') {\r\n            shipList = allShips.filter(ship => {\r\n                let shipNation = ship.nation;\r\n                let axisNations = ['Italy', 'Finland', 'Japan', 'Germany', 'Axis Neutral/Instalations'];\r\n                return axisNations.indexOf(shipNation) === -1;\r\n            });\r\n        }\r\n        else {\r\n            shipList = allShips.filter(ship => {\r\n                return userSelection.allies.indexOf(ship.nation) !== -1;\r\n            });\r\n        }\r\n\r\n        let iterCount = 0;\r\n        while (alliesPoints < points && shipList.length > 0 && iterCount < allShips.length * 10) {\r\n            iterCount++;\r\n            let index = Math.floor(Math.random() * shipList.length);\r\n            if (alliesPoints + shipList[index].points > points) {\r\n                shipList.splice(index, 1);\r\n            }\r\n            else {\r\n                //check if in shipsInPlay already\r\n                let currQuant = 0;\r\n                let shipExistence = shipsInPlay.allies.filter(ship => ship.name == shipList[index].name);\r\n                console.log(shipsInPlay.allies);\r\n                console.log(shipList[index].name);\r\n                console.log(shipExistence);\r\n                if (shipExistence.length > 0) {\r\n                    currQuant = shipExistence.length;\r\n                }\r\n\r\n                //see if currentQuant = max from all ships\r\n                //if so remove it from ship list\r\n                //otherwise add one to the shipsInPlay quantity\r\n                let shipMax = allShips.filter(ship => ship.name == shipList[index].name);\r\n                shipMax = shipMax[0].number_available;\r\n\r\n                if (shipMax == currQuant) {\r\n                    shipList.splice(index, 1);\r\n                }\r\n                else {\r\n                    if (currQuant === 0) {\r\n                        loadOneShip(shipList[index].name, 'allies');\r\n                        setFactionPoints('allies', shipList[index].points);\r\n                        alliesPoints += shipList[index].points;\r\n                        shipsInPlay.allies.push({\r\n                            name: shipList[index].name,\r\n                            secretName: shipList[index].name + ' 0',\r\n                            locked: false\r\n                        });\r\n                    } else {\r\n                        loadOneShip(shipList[index].name, 'allies');\r\n                        setFactionPoints('allies', shipList[index].points);\r\n                        alliesPoints += shipList[index].points;\r\n                        shipsInPlay.allies.push({\r\n                            name: shipList[index].name,\r\n                            secretName: shipList[index].name + ` ${currQuant}`,\r\n                            locked: false\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n        //update shipsInPlay\r\n        if (userSelection.axis[0] === 'All') {\r\n            shipList = allShips.filter(ship => {\r\n                let shipNation = ship.nation;\r\n                let axisNations = ['Italy', 'Finland', 'Japan', 'Germany', 'Axis Neutral/Instalations'];\r\n                return axisNations.indexOf(shipNation) !== -1;\r\n            });\r\n        }\r\n        else {\r\n            shipList = allShips.filter(ship => {\r\n                return userSelection.axis.indexOf(ship.nation) !== -1;\r\n            });\r\n        }\r\n\r\n        iterCount = 0;\r\n        while (axisPoints < points && shipList.length > 0 && iterCount < allShips.length * 10) {\r\n            iterCount++;\r\n            let index = Math.floor(Math.random() * shipList.length);\r\n            if (axisPoints + shipList[index].points > points) {\r\n                shipList.splice(index, 1);\r\n            }\r\n            else {\r\n                //check if in shipsInPlay already\r\n                let currQuant = 0;\r\n                let shipExistence = shipsInPlay.axis.filter(ship => ship.name == shipList[index].name);\r\n                console.log(shipsInPlay.allies);\r\n                console.log(shipList[index].name);\r\n                console.log(shipExistence);\r\n                if (shipExistence.length > 0) {\r\n                    currQuant = shipExistence.length;\r\n                }\r\n\r\n                //see if currentQuant = max from all ships\r\n                //if so remove it from ship list\r\n                //otherwise add one to the shipsInPlay quantity\r\n                let shipMax = allShips.filter(ship => ship.name == shipList[index].name);\r\n                shipMax = shipMax[0].number_available;\r\n\r\n                if (shipMax == currQuant) {\r\n                    shipList.splice(index, 1);\r\n                }\r\n                else {\r\n                    if (currQuant === 0) {\r\n                        loadOneShip(shipList[index].name, 'axis');\r\n                        setFactionPoints('axis', shipList[index].points);\r\n                        axisPoints += shipList[index].points;\r\n                        shipsInPlay.axis.push({\r\n                            name: shipList[index].name,\r\n                            secretName: shipList[index].name + ' 0',\r\n                            locked: false\r\n                        });\r\n                    } else {\r\n                        loadOneShip(shipList[index].name, 'axis');\r\n                        setFactionPoints('axis', shipList[index].points);\r\n                        axisPoints += shipList[index].points;\r\n                        shipsInPlay.axis.push({\r\n                            name: shipList[index].name,\r\n                            secretName: shipList[index].name + ` ${currQuant}`,\r\n                            locked: false\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n    function resetShips(e) {\r\n        removeShips();\r\n\r\n        /*\r\n        All the unwanted ships should be removed, so you can reset the point total to zero and then \r\n        add in the points of the ships that are still in play\r\n\r\n        */\r\n        setFactionPoints('allies', -alliesPoints);\r\n        setFactionPoints('axis', -axisPoints);\r\n\r\n        let alliesAddAmount = 0;\r\n        let axisAddAmount = 0;\r\n        shipsInPlay.allies.forEach(ship => {\r\n            let shipFound = allShips.filter(allShip => allShip.name === ship.name);\r\n\r\n            alliesAddAmount += shipFound[0].points;\r\n\r\n        });\r\n        shipsInPlay.axis.forEach(ship => {\r\n            let shipFound = allShips.filter(allShip => allShip.name === ship.name);\r\n            axisAddAmount += shipFound[0].points;\r\n        });\r\n        setFactionPoints('allies', alliesAddAmount);\r\n        setFactionPoints('axis', axisAddAmount);\r\n    }\r\n    return (\r\n        <div className=\"points-wrapper\">\r\n            <input type=\"number\" value={currPoints} name=\"points\" onChange={e => changePoints(e)} className=\"point-wrapper-placeholder\" placeholder=\"Point Limit\" />\r\n            <button className=\"RANDOM\" onClick={e => generateShips(e)}>RANDOM</button>\r\n            <button className=\"RESET\" onClick={e => resetShips(e)}>RESET</button>\r\n        </div>\r\n    )\r\n}\r\nconst mapStateToProps = state => ({\r\n    points: state.points,\r\n    allShips: state.allShips,\r\n    userSelection: state.userSelection,\r\n    alliesPoints: state.factionPoints.allies,\r\n    axisPoints: state.factionPoints.axis,\r\n    shipsInPlay: state.shipsInPlay\r\n})\r\nexport default connect(mapStateToProps, { setPoints, loadOneShip, updateOneShip, setFactionPoints, removeShips })(Points);","import React, { useEffect } from 'react';\r\nimport $ from 'jquery';\r\nimport { addShips } from '../../actions/ships';\r\nimport { connect } from 'react-redux';\r\nconst Allies = (props) => {\r\n    const inputStates = [];\r\n    useEffect(() => {\r\n        $('input[type=radio]').each(function (i) {\r\n            $(this).attr('name', i + \"\");\r\n            inputStates.push(false);\r\n\r\n        })\r\n        $('input[type=radio]').click(function (e) {\r\n            let addShips = [];\r\n            let index = parseInt($(this).prop('name'));\r\n            if (index === 0) {\r\n                for (let i = 1; i < 12; i++) {\r\n                    $(`[name=${i + \"\"}]`).prop('checked', false);\r\n                    inputStates[i] = false;\r\n                }\r\n            }\r\n            else if (index === 12) {\r\n                for (let i = 13; i < inputStates.length; i++) {\r\n                    $(`[name=${i + \"\"}]`).prop('checked', false);\r\n                    inputStates[i] = false;\r\n                }\r\n            }\r\n            else if (index < 12) {\r\n                $(`[name=0]`).prop('checked', false);\r\n                inputStates[0] = false;\r\n            }\r\n            else {\r\n                $(`[name=12]`).prop('checked', false);\r\n                inputStates[12] = false;\r\n            }\r\n            inputStates[index] = !inputStates[index];\r\n            if (!inputStates[index]) {\r\n                $(this).prop('checked', false);\r\n            }\r\n            inputStates.forEach((state, index) => {\r\n                if (state === true) {\r\n                    let country = $(`[name=${index}]`).parent().text();\r\n                    let faction;\r\n                    if (index < 12) {\r\n                        faction = 'allies';\r\n                    }\r\n                    else {\r\n                        faction = 'axis';\r\n                    }\r\n                    addShips.push({\r\n                        country,\r\n                        faction\r\n                    });\r\n\r\n                }\r\n            });\r\n            props.addShips(addShips);\r\n        });\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"allies-wrapper\">\r\n            <div className=\"allies-text-wrapper\">\r\n                <h4 className=\"allies-text\">Allies Faction</h4>\r\n            </div>\r\n            <div className=\"allies-items\">\r\n                <label className=\"container\" id=\"all\" aria-checked=\"false\">All\r\n                    <input type=\"radio\" />\r\n                    <span className=\"checkmark\"></span>\r\n\r\n                </label>\r\n                <label className=\"container\" id=\"france\">\r\n                    <input type=\"radio\" />\r\n                    <span className=\"checkmark\"></span>\r\n                    France\r\n                </label>\r\n                <label className=\"container\" id=\"new-zealand\">\r\n                    <input type=\"radio\" />\r\n                    <span className=\"checkmark\"></span>\r\n                    New Zealand\r\n                </label>\r\n                <label className=\"container\" id=\"united-kingdom\">\r\n                    <input type=\"radio\" />\r\n                    <span className=\"checkmark\"></span>\r\n                    United Kingdom\r\n                </label>\r\n                <label className=\"container\" id=\"australia\">\r\n                    <input type=\"radio\" />\r\n                    <span className=\"checkmark\"></span>\r\n                    Australia\r\n                </label>\r\n                <label className=\"container\" id=\"greece\">\r\n                    <input type=\"radio\" />\r\n                    <span className=\"checkmark\"></span>\r\n                    Greece\r\n                </label>\r\n                <label className=\"container\" id=\"poland\">\r\n                    <input type=\"radio\" />\r\n                    <span className=\"checkmark\"></span>\r\n                    Poland\r\n                </label>\r\n                <label className=\"container\" id=\"united-states\">\r\n                    <input type=\"radio\" />\r\n                    <span className=\"checkmark\"></span>\r\n                    United States\r\n                </label>\r\n                <label className=\"container\" id=\"canada\">\r\n                    <input type=\"radio\" />\r\n                    <span className=\"checkmark\"></span>\r\n                    Canada\r\n                </label>\r\n                <label className=\"container\" id=\"netherlands\">\r\n                    <input type=\"radio\" />\r\n                    <span className=\"checkmark\"></span>\r\n                    Netherlands\r\n                </label>\r\n                <label className=\"container\" id=\"soviet-union\">\r\n                    <input type=\"radio\" />\r\n                    <span className=\"checkmark\"></span>\r\n                    Soviet Union\r\n                </label>\r\n                <label className=\"container\" id=\"neutral\">\r\n                    <input type=\"radio\" />\r\n                    <span className=\"checkmark\"></span>\r\n                    Allies Neutral / Instalations\r\n                </label>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default connect(null, { addShips })(Allies);","import React from 'react';\r\n\r\nconst Axis = props => {\r\n\r\n\r\n    return (\r\n        <div className=\"axis-wrapper\">\r\n            <div className=\"axis-text-wrapper\">\r\n                <h4 className=\"axis-text\">Axis Faction</h4>\r\n            </div>\r\n            <div className=\"axis-items\">\r\n                <label className=\"container\" id=\"all\">\r\n                    <input type=\"radio\" />\r\n                    <span className=\"checkmark\"></span>\r\n                    All\r\n                </label>\r\n                <label className=\"container\" id=\"italy\">\r\n                    <input type=\"radio\" />\r\n                    <span className=\"checkmark\"></span>\r\n                    Italy\r\n                </label>\r\n                <label className=\"container\" id=\"finland\">\r\n                    <input type=\"radio\" />\r\n                    <span className=\"checkmark\"></span>\r\n                    Finland\r\n                </label>\r\n                <label className=\"container\" id=\"japan\">\r\n                    <input type=\"radio\" />\r\n                    <span className=\"checkmark\"></span>\r\n                    Japan\r\n                </label>\r\n                <label className=\"container\" id=\"germany\">\r\n                    <input type=\"radio\" />\r\n                    <span className=\"checkmark\"></span>\r\n                    Germany\r\n                </label>\r\n                <label className=\"container\" id=\"neutral\">\r\n                    <input type=\"radio\" />\r\n                    <span className=\"checkmark\"></span>\r\n                    Axis Neutral / Instalations\r\n                </label>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default Axis;","import React, { useEffect, useState, Fragment } from 'react';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { loadOneShip, updateOneShip } from '../../actions/ships';\r\nimport { setFactionPoints } from '../../actions/points';\r\nimport axios from 'axios';\r\nconst AddShips = ({ allies, axis, faction, shipsInPlay, allShips, loadOneShip, updateOneShip, setFactionPoints, alliesPoints, axisPoints, maxPoints }) => {\r\n    const [ships, updateShips] = useState([]);\r\n    const [displayShips, updateDisplay] = useState([]);\r\n    let displayArray = {};\r\n\r\n    let axis_nations = ['Italy', 'Finland', 'Japan', 'Germany', 'Axis Neutral/Installations'];\r\n    useEffect(() => {\r\n        async function getShips() {\r\n            let data;\r\n            faction === 'axis' ? data = axis : data = allies;\r\n            let shipArray = await axios.post('/ships/selected', { ships: data, faction }, { headers: { 'Content-Type': 'application/json' } });\r\n\r\n            updateShips(shipArray.data);\r\n        }\r\n        getShips();\r\n    }, []);\r\n    useEffect(() => {\r\n        \r\n    }, [displayShips]);\r\n    useEffect(() => {\r\n        updateDisplayArray();\r\n    }, [ships]);\r\n    let i = 0;\r\n\r\n    function updateDisplayArray() {\r\n        ships.forEach(ship => {\r\n            if (Object.keys(displayArray).indexOf(ship.nation) == -1) {\r\n                displayArray[ship.nation] = [{\r\n                    name: ship.name,\r\n                    number_available: ship.number_available,\r\n                    class: ship.class,\r\n                    points: ship.points\r\n                }];\r\n\r\n            }\r\n            else {\r\n                \r\n                displayArray[ship.nation].push({\r\n                    name: ship.name,\r\n                    number_available: ship.number_available,\r\n                    class: ship.class,\r\n                    points: ship.points\r\n                })\r\n            }\r\n        });\r\n        \r\n        let tempArr = [];\r\n        let classOrder = ['B', 'CV', 'C', 'D', 'PB', 'S', 'AP', 'A', 'AC'];\r\n        Object.keys(displayArray).forEach(nation => {\r\n            let shipArray = displayArray[nation];\r\n            shipArray.sort((ship1, ship2) => {\r\n                if(classOrder.indexOf(ship1.class) !== -1 && classOrder.indexOf(ship2.class) !== -1){\r\n                    if(classOrder.indexOf(ship1.class) - classOrder.indexOf(ship2.class) == 0){\r\n                        if(ship1.points - ship2.points == 0){\r\n                            return ship1.name - ship2.name\r\n                        }\r\n                        return ship1.points - ship2.points;\r\n                    }\r\n                    return classOrder.indexOf(ship1.class) - classOrder.indexOf(ship2.class);\r\n                }\r\n                else{\r\n                    return;\r\n                }\r\n            });\r\n            tempArr.push({\r\n                nation,\r\n                ships: shipArray\r\n            })\r\n        });\r\n        updateDisplay([...displayShips, ...tempArr]);\r\n\r\n    }\r\n    function displayShip(e, nation) {\r\n        let relevantShips = displayShips.filter(ship => {\r\n            if (ship.nation === nation) {\r\n                return ship;\r\n            }\r\n        });\r\n\r\n        relevantShips = relevantShips[0].ships;\r\n\r\n        //find the individual ship\r\n        let shipName = e.target.parentNode.querySelector('[name=ship]').textContent;\r\n\r\n        //check to see whether the ship is in ships in play\r\n        let shipInPlay = shipsInPlay.filter(ship => ship.name === shipName);\r\n\r\n        //update redux to include that ship in the ships in play if necessary\r\n        if (shipInPlay.length === 0) {\r\n\r\n\r\n            let shipPoints = allShips.filter(ship => ship.name === shipName);\r\n\r\n            let faction;\r\n            shipPoints = shipPoints[0];\r\n            if (axis_nations.indexOf(shipPoints.nation) == -1) {\r\n                faction = 'allies';\r\n            }\r\n            else {\r\n                faction = 'axis';\r\n            }\r\n\r\n            shipPoints = shipPoints.points;\r\n            if (faction === 'allies') {\r\n                if (alliesPoints + shipPoints <= maxPoints) {\r\n                    loadOneShip(shipName, faction);\r\n                    setFactionPoints(faction, shipPoints);\r\n                }\r\n\r\n            }\r\n            else {\r\n                if (axisPoints + shipPoints <= maxPoints) {\r\n                    loadOneShip(shipName, faction);\r\n                    setFactionPoints(faction, shipPoints);\r\n                }\r\n            }\r\n\r\n\r\n        }\r\n        else {\r\n            let currQuant = shipInPlay.length;\r\n\r\n            let maxQuant = allShips.filter(ship => ship.name === shipName);\r\n\r\n            maxQuant = maxQuant[0].number_available;\r\n\r\n            if (currQuant < maxQuant) {\r\n                let shipPoints = allShips.filter(ship => ship.name === shipName);\r\n                shipPoints = shipPoints[0];\r\n                let faction;\r\n                if (axis_nations.indexOf(shipPoints.nation) == -1) {\r\n                    faction = 'allies'\r\n                }\r\n                else {\r\n                    faction = 'axis';\r\n                }\r\n\r\n                shipPoints = shipPoints.points;\r\n                if (faction == 'allies') {\r\n                    if (alliesPoints + shipPoints <= maxPoints) {\r\n                        loadOneShip(shipName, faction);\r\n                        setFactionPoints(faction, shipPoints);\r\n                    }\r\n                }\r\n                else {\r\n                    if (axisPoints + shipPoints <= maxPoints) {\r\n                        loadOneShip(shipName, faction);\r\n                        setFactionPoints(faction, shipPoints);\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n\r\n            }\r\n        }\r\n\r\n        //extract the point total, subtract one from the total amount present\r\n\r\n    }\r\n    return (\r\n        <div id=\"add-ship\">\r\n            {/* <p id=\"minimize\"> [+]</p>\r\n            <p id=\"close\">X</p> */}\r\n            <div id=\"ship-content\">\r\n                {faction === 'allies' ? (\r\n                    displayShips.map(nation => {\r\n                        \r\n                        return (\r\n                            <div className=\"ship-wrapper\" id = \"allies-ship-wrapper\">\r\n                                <p key={i++} className=\"header-text\">{nation.nation}</p>\r\n                                {nation.ships.map(ship => {\r\n                                    \r\n                                    let shipExistence = shipsInPlay.filter(DBShip => DBShip.name === ship.name);\r\n\r\n                                    let total = shipExistence.length > 0 ? ship.number_available - shipExistence.length : ship.number_available;\r\n                                    return (\r\n                                        total > 0 ? (\r\n                                            <div className=\"ship-content-holder\" onClick={e => displayShip(e, nation.nation)}>\r\n                                                <p key={i++} name=\"ship\" className=\"ship\">{ship.name}</p>\r\n                                                <p key={i++} name=\"class\" className=\"class\">Class: {ship.class ? ship.class : 'N/A'}</p>\r\n                                                <p key={i++} name=\"number-available\" className=\"number-available\">\r\n                                                    Qty: {total}\r\n                                                </p>\r\n                                                <p key={i++} name=\"point-value\" className=\"point-value\">Pts: {ship.points}</p>\r\n\r\n                                            </div>\r\n                                        )\r\n                                            :\r\n                                            <Fragment></Fragment>\r\n                                    )\r\n                                }\r\n                                )}\r\n                            </div>\r\n\r\n                        )\r\n                    })\r\n                ) :\r\n                    (\r\n                        displayShips.map(nation => {\r\n\r\n                            return (\r\n                                <div className=\"ship-wrapper\" id = \"axis-ship-wrapper\">\r\n                                    <p key={i++} className=\"header-text\">{nation.nation}</p>\r\n                                    {nation.ships.map(ship => {\r\n                                        \r\n                                        let shipExistence = shipsInPlay.filter(DBShip => DBShip.name === ship.name);\r\n\r\n                                        let total = shipExistence.length > 0 ? ship.number_available - shipExistence.length : ship.number_available;\r\n                                        return (\r\n                                            total > 0 ? (\r\n                                                <div className=\"ship-content-holder\" onClick={e => displayShip(e, nation.nation)}>\r\n                                                    <p key={i++} name=\"ship\" className=\"ship\">{ship.name}</p>\r\n                                                    <p key={i++} name=\"class\" className=\"class\">Class: {ship.class ? ship.class : 'N/A'}</p>\r\n                                                    <p key={i++} name=\"number-available\" className=\"number-available\">\r\n                                                        Qty: {total}\r\n                                                    </p>\r\n                                                    <p key={i++} name=\"point-value\" className=\"point-value\">Pts: {ship.points}</p>\r\n                                                </div>\r\n                                            )\r\n                                                :\r\n                                                <Fragment></Fragment>\r\n                                        )\r\n                                    }\r\n                                    )}\r\n                                </div>\r\n\r\n                            )\r\n                        })\r\n                    )}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nAddShips.propTypes = {\r\n    allies: PropTypes.array,\r\n    axis: PropTypes.array\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n\r\n    allies: state.userSelection.allies,\r\n    axis: state.userSelection.axis,\r\n    allShips: state.allShips,\r\n    shipsInPlay: [...state.shipsInPlay.allies, ...state.shipsInPlay.axis],\r\n    alliesPoints: state.factionPoints.allies,\r\n    axisPoints: state.factionPoints.axis,\r\n    maxPoints: state.points\r\n})\r\n\r\nexport default connect(mapStateToProps, { loadOneShip, updateOneShip, setFactionPoints })(AddShips);","import React, { useEffect } from 'react';\r\n\r\n\r\nimport { connect } from 'react-redux';\r\nimport { toggleLock, removeOneShip } from '../../actions/ships';\r\nimport { setFactionPoints } from '../../actions/points';\r\n// import shipsInPlay from '../../reducers/shipsInPlay';\r\nconst ShipsShown = props => {\r\n    const { alliesShips, axisShips, faction, allShips, toggleLock, removeOneShip, setFactionPoints } = props;\r\n    let alliesArray = [];\r\n    let axisArray = [];\r\n    let inputs;\r\n    useEffect(() => {\r\n        inputs = document.querySelectorAll('inputs[class=no-pointer');\r\n    }, [alliesShips, axisShips]);\r\n    allShips.forEach(ship => {\r\n        alliesShips.forEach(allyShip => {\r\n            if (allyShip.name === ship.name && ship.nation !== 'Axis Neutral / Instalations') {\r\n                alliesArray.push({ ...ship, secretName: allyShip.secretName, locked: allyShip.locked });\r\n\r\n            }\r\n        });\r\n        axisShips.forEach(axisShip => {\r\n            if (axisShip.name === ship.name && ship.nation !== 'Allies Neutral / Instalations') {\r\n                axisArray.push({ ...ship, secretName: axisShip.secretName, locked: axisShip.locked });\r\n            }\r\n        });\r\n    });\r\n\r\n    function toggleCheckAllies(e) {\r\n        let classArr = Array.from(e.target.classList);\r\n        if (classArr.indexOf('fa') == -1) {\r\n            let shipName = e.target.getAttribute('name');\r\n            toggleLock(shipName, 'allies');\r\n\r\n            let input = e.target.querySelector('input');\r\n            if (input) {\r\n                input.checked = !input.checked;\r\n            }\r\n        }\r\n    }\r\n    function toggleCheckAxis(e) {\r\n        let classArr = Array.from(e.target.classList);\r\n        if (classArr.indexOf('fa') == -1) {\r\n            let shipName = e.target.getAttribute('name');\r\n            console.log(shipName);\r\n            toggleLock(shipName, 'axis');\r\n\r\n            let input = e.target.querySelector('input');\r\n            if (input) {\r\n                input.checked = !input.checked;\r\n            }\r\n        }\r\n    }\r\n    function deleteSingleShip(e) {\r\n        let shipName = e.target.getAttribute('name');\r\n        removeOneShip({ name: e.target.getAttribute('name') });\r\n        let shipIdentifier = shipName.split(' ');\r\n        shipIdentifier.splice(shipIdentifier.length - 1, 1);\r\n        shipIdentifier = shipIdentifier.join(' ');\r\n        console.log(shipIdentifier);\r\n        let currShip = allShips.filter(ship => ship.name === shipIdentifier);\r\n        currShip = currShip[0];\r\n        console.log(currShip);\r\n        let axisNations = ['Italy', 'Finland', 'Japan', 'Germany', 'Axis Neutral/Instalations'];\r\n        if (axisNations.indexOf(currShip.nation) !== -1) {\r\n            setFactionPoints('axis', -currShip.points);\r\n        }\r\n        else {\r\n            setFactionPoints('allies', -currShip.points);\r\n        }\r\n    }\r\n    let i = 0;\r\n    return (\r\n        <div className=\"display-ship-wrapper\">\r\n            {faction === 'allies' ? (\r\n                alliesArray.map(allyShip => {\r\n                    //let currShip = alliesShips.filter(ship => ship.secretName == allyShip.secetName);\r\n                    return (\r\n                        allyShip.image ?\r\n                            <div key={i++} className=\"ship-wrapper\" name={allyShip.secretName} onClick={e => toggleCheckAllies(e)}>\r\n                                <span key={i++} className=\"no-pointer\">Lock: </span>\r\n                                <input key={i++} className=\"no-pointer\" name={allyShip.secretName} type='checkbox' checked = {allyShip.locked}/>\r\n                                <i name={allyShip.secretName} className=\"fa fa-trash delete\" onClick={e => deleteSingleShip(e)}></i>\r\n                                <div key={i++} className=\"ship-placard no-pointer\">\r\n                                    <img key={i++} className=\"image-ship-placard no-pointer\" src={allyShip.image} alt={allyShip.name} crossOrigin = 'anonymous'/>\r\n                                </div>\r\n                            </div>\r\n                            :\r\n                            <div key={i++} className=\"ship-wrapper\" name={allyShip.secretName} onClick={e => toggleCheckAllies(e)}>\r\n                                <span key={i++} className=\"no-pointer\">Lock: </span>\r\n\r\n                                {allyShip.locked ? <input key={i++} className=\"no-pointer\" name={allyShip.secretName} type=\"checkbox\" checked /> :\r\n                                    <input key={i++} className=\"no-pointer\" name={allyShip.secretName} type=\"checkbox\" />}\r\n                                <i name={allyShip.secretName} className=\"fa fa-trash delete\" onClick={e => deleteSingleShip(e)}></i>\r\n                                <div key={i++} className=\"ship-placard no-pointer\">\r\n                                    <h3 key={i++} className=\"no-pointer\">{allyShip.name}</h3>\r\n                                    <h5 key={i++} className=\"no-pointer\">{allyShip.nation}</h5>\r\n                                    <h5 key={i++} className=\"no-pointer\">{allyShip.points}</h5>\r\n                                </div>\r\n                            </div>\r\n                    )\r\n                }\r\n                )\r\n            )\r\n                :\r\n                (\r\n                    axisArray.map(axisShip => {\r\n                        //let currShip = alliesShips.filter(ship => ship.secretName == axisShip.secetName);\r\n                        return (\r\n                            axisShip.image ?\r\n                                <div key={i++} className=\"ship-wrapper\" name={axisShip.secretName} onClick={e => toggleCheckAxis(e)}>\r\n                                    <span key={i++} className=\"no-pointer\">Lock: </span>\r\n\r\n                                    {axisShip.locked ? <input key={i++} className=\"no-pointer\" name={axisShip.secretName} type=\"checkbox\" checked /> :\r\n                                        <input key={i++} className=\"no-pointer\" name={axisShip.secretName} type=\"checkbox\" />}\r\n                                    <i name={axisShip.secretName} className=\"fa fa-trash delete\" onClick={e => deleteSingleShip(e)}></i>\r\n                                    <div key={i++} className=\"ship-placard no-pointer\">\r\n                                        <img key={i++} className=\"image-ship-placard no-pointer\" src={axisShip.image} alt={axisShip.name} crossOrigin = 'anonymous'/>\r\n                                    </div>\r\n                                </div>\r\n                                :\r\n                                <div key={i++} className=\"ship-wrapper\" name={axisShip.secretName} onClick={e => toggleCheckAxis(e)}>\r\n                                    <span key={i++} className=\"no-pointer\">Lock: </span>\r\n\r\n                                    {axisShip.locked ? <input key={i++} className=\"no-pointer\" name={axisShip.secretName} type=\"checkbox\" checked /> :\r\n                                        <input key={i++} className=\"no-pointer\" name={axisShip.secretName} type=\"checkbox\" />}\r\n                                    <i name={axisShip.secretName} className=\"fa fa-trash delete\" onClick={e => deleteSingleShip(e)}></i>\r\n                                    <div key={i++} className=\"ship-placard no-pointer\">\r\n                                        <h3 key={i++} className=\"no-pointer\">{axisShip.name}</h3>\r\n                                        <h5 key={i++} className=\"no-pointer\">{axisShip.nation}</h5>\r\n                                        <h5 key={i++} className=\"no-pointer\">{axisShip.points}</h5>\r\n                                    </div>\r\n                                </div>\r\n                        )\r\n                    }\r\n                    )\r\n                )}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    alliesShips: state.shipsInPlay.allies,\r\n    axisShips: state.shipsInPlay.axis,\r\n    allShips: state.allShips,\r\n});\r\n\r\nexport default connect(mapStateToProps, { toggleLock, removeOneShip, setFactionPoints })(ShipsShown);","import React, {useEffect, useState} from 'react';\r\nimport {Document, Page, Text, View, StyleSheet, PDFDownloadLink, Image} from '@react-pdf/renderer';\r\n\r\nimport { connect } from 'react-redux';\r\nlet LOADING = true;\r\nconst ships = [];\r\nconst styles = StyleSheet.create({\r\n    page: {\r\n        flexDirection: \"column\"\r\n    },\r\n    headSection:{\r\n        width: '100%',\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        justifyContent: 'space-between',\r\n        padding: '5%',\r\n        fontSize: '12'\r\n    },\r\n    section: {\r\n        width: '100vw',\r\n        justifyContent: 'space-evenly',\r\n        alignItems: 'center',\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        flexWrap: 'wrap',\r\n        margin: '10px',\r\n        marginLeft: '40px'\r\n    },\r\n    pageNumber: {\r\n        position: 'absolute',\r\n        bottom: '3',\r\n        right: '3',\r\n        padding: '15px',\r\n        fontSize: '12'\r\n    }\r\n});\r\n\r\nconst TestPDF = (props) => {\r\n\r\n    let i = 0;\r\n    let currentDate = new Date();\r\n\r\n    let date = currentDate.getDate();\r\n    let month = currentDate.getMonth() + 1; //Be careful! January is 0 not 1\r\n    let year = currentDate.getFullYear();\r\n    year = year + \"\";\r\n    let lastPage = 0;\r\n    return(\r\n            <Document onRender = {() => {LOADING  = false}}>\r\n            <Page size = \"A4\" style = {styles.page}>\r\n                <View style = {styles.headSection} fixed>\r\n                    <Text>Faction: {props.faction === 'allies' ? 'Allies' : 'Axis'}</Text>\r\n                    <Text>Points: {props.sidePoints}/{props.totalPoints}</Text>\r\n                    <Text>Date: {month + \"\"}/{date + \"\"}/{year.substring(2) + \"\"}</Text>\r\n                </View>\r\n                <View style = {styles.pageNumber} fixed>\r\n                    <Text render={({ pageNumber, totalPages }) => (\r\n                                         `${pageNumber} / ${totalPages}`\r\n                                         )} fixed />\r\n                </View>\r\n                <View style = {styles.section}>\r\n                   {props.ships.map((ship, index) => {\r\n                       if(index%6 == 0 && props.ships.length > index){\r\n                           return (\r\n                                <View>\r\n                                    <Image style = {{height: '239px', width: '170px', padding: '10px'}} src={ship.image}/>\r\n\r\n                                </View>\r\n                           )\r\n                       }\r\n                       else{\r\n                        return (\r\n                            ship.image ?\r\n                                <View>\r\n                                    <Image style = {{height: '239px', width: '170px', padding: '10px'}} src={ship.image}/>\r\n                                </View>\r\n                                    \r\n                            :\r\n                            <View>\r\n                            </View>\r\n    \r\n                           )\r\n                       }\r\n                       \r\n                   })}\r\n\r\n                </View>\r\n            </Page>\r\n        </Document>\r\n        \r\n    )\r\n}\r\nconst PDFDownload = (props) => {\r\n    const {alliesShips, axisShips, allShips, faction}  = props;\r\n    let alliesArray = [];\r\n    let axisArray = [];\r\n    allShips.forEach(ship => {\r\n        alliesShips.forEach(allyShip => {\r\n            if (allyShip.name === ship.name && ship.nation !== 'Axis Neutral / Instalations') {\r\n                alliesArray.push({ ...ship, secretName: allyShip.secretName, locked: allyShip.locked });\r\n\r\n            }\r\n        });\r\n        axisShips.forEach(axisShip => {\r\n            if (axisShip.name === ship.name && ship.nation !== 'Allies Neutral / Instalations') {\r\n                axisArray.push({ ...ship, secretName: axisShip.secretName, locked: axisShip.locked });\r\n            }\r\n        });\r\n    });\r\n    let shipsToSend = faction  == 'allies' ? alliesArray : axisArray;\r\n    return(\r\n        \r\n            <PDFDownloadLink document = {<TestPDF sidePoints = {props.sidePoints} totalPoints = {props.totalPoints} ships = {shipsToSend} faction = {faction}/>} fileName = {faction + '.pdf'}>\r\n                {({ blob, url, loading, error }) => (loading ? 'Loading document...' : <i className=\"fa fa-file-pdf-o\"></i>)}\r\n            </PDFDownloadLink>\r\n        \r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    alliesShips: state.shipsInPlay.allies,\r\n    axisShips: state.shipsInPlay.axis,\r\n    allShips: state.allShips,\r\n})\r\n\r\nexport default connect(mapStateToProps, {})(PDFDownload)","import React, { useState } from 'react';\r\nimport AddShips from './AddShips';\r\nimport ShipsShown from './ShipsShown';\r\nimport PDFDownload from './PDFDownload';\r\n\r\nimport {jsPDF} from 'jspdf';\r\nimport $, { data } from 'jquery';\r\n\r\nimport domToImage from 'dom-to-image';\r\n\r\nimport html2canvas from 'html2canvas';\r\n\r\nimport { connect } from 'react-redux';\r\nconst AlliesList = ({ points, alliesPoints }) => {\r\n\r\n    const [shipsLoaded, changeShips] = useState(false);\r\n\r\n    function addAllies() {\r\n        changeShips(!shipsLoaded);\r\n    }\r\n\r\n    function generatePDF(){\r\n        window.scrollTo(0,0);\r\n        const printArea = document.getElementById('allies-container');\r\n        html2canvas(printArea, {allowTaint: true, useCORS: true}).then(canvas => {\r\n            console.log(canvas);\r\n            const dataURL  = canvas.toDataURL();\r\n            \r\n            const pdf = new jsPDF();\r\n\r\n            const imgProps = pdf.getImageProperties(dataURL);\r\n            const pdfWidth = pdf.internal.pageSize.getWidth() - 20;\r\n            const pdfHeight = (imgProps.height * pdfWidth)/imgProps.width;\r\n\r\n\r\n            pdf.addImage(dataURL, 'PNG', 10, 10, pdfWidth, pdfHeight);\r\n\r\n            pdf.save('Allies_Ships.pdf');\r\n        })\r\n    }\r\n    return (\r\n        <div className=\"allies-list-wrapper\" id = \"allies-container\">\r\n            <div className=\"allies-list-header-wrapper\">\r\n                <div className=\"text-wrapper\">\r\n                    <h4>Allies list</h4>\r\n                    <p>{alliesPoints} / {points}</p>\r\n                </div>\r\n                <div className=\"save-options\">\r\n                    <PDFDownload id = \"download\" totalPoints = {points} sidePoints = {alliesPoints} faction = 'allies'/>\r\n                </div>\r\n            </div>\r\n            <div className=\"line\">\r\n                <hr />\r\n            </div>\r\n            <div className=\"add-unit\">\r\n                <ShipsShown faction='allies' />\r\n\r\n                <p onClick={e => addAllies(e)}>[{shipsLoaded ? '-' : '+'}] Add Unit</p>\r\n                {shipsLoaded && (\r\n                    <AddShips faction=\"allies\" />\r\n                )}\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    points: state.points,\r\n    alliesPoints: state.factionPoints.allies\r\n})\r\n\r\nexport default connect(mapStateToProps, {})(AlliesList);","import React, { useState } from 'react';\r\nimport AddShips from './AddShips';\r\nimport ShipsShown from './ShipsShown';\r\nimport { connect } from 'react-redux';\r\nimport PDFDownload from './PDFDownload';\r\n\r\nimport html2canvas from 'html2canvas';\r\nimport {jsPDF} from 'jspdf';\r\nconst AxisList = ({ points, axisPoints }) => {\r\n    const [shipsLoaded, changeShips] = useState(false);\r\n\r\n    function addAxis() {\r\n        changeShips(!shipsLoaded);\r\n    }\r\n    function generateAxisPDF(){\r\n        window.scrollTo(0,0);\r\n        const printArea = document.getElementById('axis-container');\r\n        html2canvas(printArea, {allowTaint: true, useCORS: true}).then(canvas => {\r\n            \r\n            const dataURL  = canvas.toDataURL();\r\n            \r\n            const pdf = new jsPDF();\r\n\r\n            const imgProps = pdf.getImageProperties(dataURL);\r\n            console.log(imgProps);\r\n            const pdfWidth = pdf.internal.pageSize.getWidth() - 20;\r\n            const pdfHeight = (imgProps.height * pdfWidth)/imgProps.width;\r\n\r\n\r\n            pdf.addImage(dataURL, 'PNG', 10, 10, pdfWidth, pdfHeight);\r\n\r\n            pdf.save('Axis_Ships.pdf');\r\n        })\r\n    }\r\n    return (\r\n        <div className=\"axis-list-wrapper\" id = \"axis-container\">\r\n            <div className=\"axis-list-header-wrapper\">\r\n                <div className=\"text-wrapper\">\r\n                    <h4>Axis list</h4>\r\n                    <p>{axisPoints} / {points}</p>\r\n                </div>\r\n                <div className=\"save-options\">\r\n                    <PDFDownload id = \"download\" totalPoints = {points} sidePoints = {axisPoints} faction  = 'axis'/>\r\n                </div>\r\n            </div>\r\n            <div className=\"line\">\r\n                <hr />\r\n            </div>\r\n            <div className=\"add-unit\">\r\n                <ShipsShown faction='axis' />\r\n                <p onClick={e => addAxis(e)}>[{shipsLoaded ? '-' : '+'}] Add Unit</p>\r\n                {shipsLoaded && (\r\n                    <AddShips faction=\"axis\" />\r\n                )}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    points: state.points,\r\n    axisPoints: state.factionPoints.axis\r\n})\r\n\r\nexport default connect(mapStateToProps, {})(AxisList);","import React, { useState, useEffect, Fragment } from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\nconst axios = require('axios');\r\nconst $ = require('jquery');\r\n\r\n\r\n\r\n\r\nconst AddtoDB = ({ allShips }) => {\r\n    const [shipProperties, updateProperties] = useState({\r\n        nation: \"\",\r\n        units: \"\",\r\n        name: \"\",\r\n        points: \"\",\r\n        class: \"\",\r\n        image: \"\"\r\n    });\r\n    const [locked, updateLock] = useState(true);\r\n    const [existingShip, updateExistingShip] = useState({\r\n        nation: \"\",\r\n        units: \"\",\r\n        name: \"\",\r\n        points: \"\",\r\n        class: \"\",\r\n        image: \"\"\r\n    });\r\n\r\n    const [deleteShip, updateDeleteShip] = useState({\r\n        name: ''\r\n    });\r\n    useEffect(() => {\r\n    }, [existingShip]);\r\n\r\n    const [displayType, updateDisplayType] = useState('new ship');\r\n\r\n\r\n    $(document).ready(function () {\r\n        $('#add-new-ship').unbind().click(function () {\r\n            updateDisplayType('new ship');\r\n            if ($(this).hasClass('non-selected')) {\r\n                $(this).removeClass('non-selected');\r\n                $('#update-existing-ship').addClass('non-selected');\r\n                $('#delete-existing-ship').addClass('non-selected');\r\n            }\r\n        });\r\n        $('#update-existing-ship').unbind().click(function () {\r\n            updateDisplayType('update ship');\r\n            if ($(this).hasClass('non-selected')) {\r\n                $(this).removeClass('non-selected');\r\n                $('#add-new-ship').addClass('non-selected');\r\n                $('#delete-existing-ship').addClass('non-selected');\r\n            }\r\n        });\r\n        $('#delete-existing-ship').unbind().click(function () {\r\n            updateDisplayType('delete ship');\r\n            if ($(this).hasClass('non-selected')) {\r\n                $(this).removeClass('non-selected');\r\n                $('#add-new-ship').addClass('non-selected');\r\n                $('#update-existing-ship').addClass('non-selected');\r\n            }\r\n        })\r\n\r\n    })\r\n    async function submitForm(e) {\r\n        e.preventDefault();\r\n        if (!locked) {\r\n            if (displayType === 'new ship') {\r\n                if (shipProperties.name !== \"\" && shipProperties.nation !== \"\" && shipProperties.units !== \"\" && shipProperties.points !== \"\") {\r\n                    const config = {\r\n                        headers: {\r\n                            'Content-Type': \"application/json\"\r\n                        }\r\n                    };\r\n\r\n                    try {\r\n                        const body = shipProperties;\r\n\r\n                        let newFormData = new FormData();\r\n                        let newMyFile = document.getElementById('new-image');\r\n                        let newLink;\r\n                        if (newMyFile.files[0]) {\r\n                            newFormData.append('image', newMyFile.files[0], newMyFile.files[0].name);\r\n                            let data = await axios.post('/ships/ship-url', newFormData);\r\n\r\n                            newLink = data.data;\r\n                            body.image = newLink;\r\n\r\n                            await axios.put('/ships', body, config);\r\n                            alert('Ship added with image');\r\n                        }\r\n                        else {\r\n                            await axios.put('/ships', body, config);\r\n                            alert('Ship added with no image');\r\n                        }\r\n                    } catch (err) {\r\n                        console.log(err);\r\n                        alert('Error adding new ship');\r\n                    }\r\n                }\r\n                else {\r\n                    alert(\"Info not filled out completely\");\r\n                }\r\n            }\r\n            else if (displayType === 'delete ship') {\r\n                \r\n                try {\r\n                    await axios.delete('/ships/ship', { data: deleteShip }, { headers: { 'Content-Type': \"application/json\" } });\r\n                    alert('Successfully deleted ' + deleteShip.name);\r\n                }\r\n                catch (err) {\r\n                    alert('Error deleting ' + deleteShip.name);\r\n                }\r\n            }\r\n            else {\r\n                let formData = new FormData();\r\n                let myFile = document.getElementById('update-image');\r\n                let link;\r\n                const config = {\r\n                    headers: {\r\n                        'Content-Type': \"application/json\"\r\n                    }\r\n                };\r\n                if (myFile.files[0]) {\r\n                    \r\n                    formData.append('image', myFile.files[0], myFile.files[0].name);\r\n                    let data = await axios.post('/ships/ship-url', formData);\r\n\r\n                    link = data.data;\r\n                    \r\n                    let body = existingShip;\r\n                    body.image = link;\r\n                    await axios.put('/ships/update', body, config);\r\n                    // updateExistingShip({\r\n                    //     ...existingShip,\r\n                    //     image: link\r\n                    // });\r\n                    alert('Update complete');\r\n                    \r\n                }\r\n                else {\r\n                    \r\n                    await axios.put('/ships/update', existingShip, config);\r\n                    alert('Update complete');\r\n                }\r\n\r\n\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    function inputUpdate(e) {\r\n        updateProperties({\r\n            ...shipProperties,\r\n            [e.target.name]: e.target.value\r\n        });\r\n    }\r\n\r\n    function changeTargetShip(e) {\r\n        let shipName = e.target.value;\r\n\r\n        let currShipInfo = allShips.filter(ship => ship.name === shipName);\r\n        currShipInfo = currShipInfo[0];\r\n        updateExistingShip({\r\n            nation: currShipInfo.nation,\r\n            class: currShipInfo.class,\r\n            points: currShipInfo.points,\r\n            units: currShipInfo.number_available,\r\n            name: currShipInfo.name,\r\n            image: currShipInfo.image ? currShipInfo.image : '',\r\n            class: currShipInfo.class ? currShipInfo.class : ''\r\n        });\r\n    }\r\n    function updateChangeProps(e) {\r\n        updateExistingShip({\r\n            ...existingShip,\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n    function changeDeleteShip(e) {\r\n        let shipName = e.target.value;\r\n        updateDeleteShip({\r\n            ...deleteShip,\r\n            name: shipName\r\n        });\r\n    }\r\n    function passwordCheck(e) {\r\n        let password = document.getElementById('auth-pass').value;\r\n        if (password === 'floatilla') {\r\n            updateLock(false);\r\n            document.getElementById('auth-pass').value = \"\";\r\n        }\r\n        else {\r\n            alert('Invalid Password');\r\n            document.getElementById('auth-pass').value = \"\";\r\n        }\r\n    }\r\n    return (\r\n        <form className=\"db-container\" onSubmit={async (e) => await submitForm(e)}>\r\n            <div className=\"db-container-banner\">\r\n                <div className=\"db-container-text-options\">\r\n                    <h3 className=\"db-container-header\" id=\"add-new-ship\">Add a new ship</h3>\r\n                    <h3 className=\"db-container-header non-selected\" id=\"update-existing-ship\">Update Existing Ship</h3>\r\n                    <h3 className=\"db-container-header non-selected\" id=\"delete-existing-ship\">Delete Existing Ship</h3>\r\n                </div>\r\n\r\n                <hr />\r\n            </div>\r\n\r\n            {locked ?\r\n                <div className=\"authorization-block\">\r\n                    <h1 className=\"authorization-header\">Not Authorized</h1>\r\n                    <h4 className=\"authorization-sub-text\">Please enter a valid password to modify the database</h4>\r\n                    <div className=\"password-entry\">\r\n                        <input className=\"authorization-password\" id=\"auth-pass\" type=\"password\" placeholder=\"Password\" />\r\n                        <button className=\"authorization-submit\" onClick={e => passwordCheck(e)}>Submit</button>\r\n                    </div>\r\n\r\n                </div>\r\n                :\r\n                <div className=\"specifications\">\r\n                    {displayType === 'new ship' ? (\r\n                        <Fragment>\r\n                            <input placeholder=\"Nation\" name=\"nation\" value={shipProperties.nation} onChange={e => inputUpdate(e)} />\r\n                            <input placeholder=\"Number of units available\" type=\"number\" name=\"units\" value={shipProperties.units} onChange={e => inputUpdate(e)} />\r\n                            <input placeholder=\"Ship name\" name=\"name\" value={shipProperties.name} onChange={e => inputUpdate(e)} />\r\n                            <input placeholder=\"Points Value/Unit\" name=\"points\" type=\"number\" value={shipProperties.points} onChange={e => inputUpdate(e)} />\r\n                            <input placeholder=\"Ship class\" name=\"class\" value={shipProperties.class} onChange={e => inputUpdate(e)} />\r\n                            <input type=\"file\" name=\"image\" id=\"new-image\" onChange={e => inputUpdate(e)} />\r\n                            <input type=\"submit\" className=\"database-submit\" placeholder=\"submit\" />\r\n                        </Fragment>\r\n                    ) : displayType === 'update ship' ?\r\n                            <Fragment>\r\n                                <label htmlFor=\"ships\">Choose the name of the ship to modify</label>\r\n                                <select id='ship-selector' name=\"ships\" onChange={e => changeTargetShip(e)}>\r\n                                    {allShips.map(ship => (\r\n                                        <option value={ship.name}>{ship.name}</option>\r\n                                    ))}\r\n                                </select>\r\n                                <label for=\"nation\">Nation: </label>\r\n                                <input placeholder=\"Nation\" name=\"nation\" value={existingShip.nation} onChange={e => updateChangeProps(e)} />\r\n                                <label for=\"units\">Number Available: </label>\r\n                                <input placeholder=\"Number available\" name=\"units\" value={existingShip.units} onChange={e => updateChangeProps(e)} />\r\n                                <label for=\"points\">Points: </label>\r\n                                <input placeholder=\"Points\" name=\"points\" value={existingShip.points} onChange={e => updateChangeProps(e)} />\r\n                                <label for=\"class\">Class: </label>\r\n                                <input placeholder=\"Class\" name=\"class\" value={existingShip.class} onChange={e => updateChangeProps(e)} />\r\n                                {existingShip.image ? <img className=\"existing-image\" src={existingShip.image} alt=\"ship image here\" /> : <label>No image for {existingShip.name}</label>}\r\n                                <input placeholder=\"Image\" type=\"file\" name=\"image\" id=\"update-image\" />\r\n                                <input type=\"submit\" className='database-submit' placeholder=\"submit\" />\r\n                            </Fragment>\r\n                            :\r\n                            <Fragment>\r\n                                <label htmlFor=\"ships\">Choose the name of the ship to delete</label>\r\n                                <select id='ship-selector' name=\"ships\" onChange={e => changeDeleteShip(e)}>\r\n                                    {allShips.map(ship => (\r\n                                        <option value={ship.name}>{ship.name}</option>\r\n                                    ))}\r\n                                </select>\r\n                                <input type=\"submit\" className=\"database-submit\" placeholder=\"submit\" />\r\n                            </Fragment>\r\n                    }\r\n                </div>\r\n            }\r\n        </form>\r\n    )\r\n}\r\nconst mapStateToProps = state => ({\r\n    allShips: state.allShips\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(AddtoDB);","//import the actions\r\nimport {\r\n    ADD_SHIP\r\n} from '../actions/types';\r\n\r\nconst initialState = {\r\n    allies: [],\r\n    axis: []\r\n}\r\n\r\nexport default function (state = initialState, action) {\r\n    const { type, payload } = action;\r\n\r\n    switch (type) {\r\n        case ADD_SHIP:\r\n            state.axis = [];\r\n            state.allies = [];\r\n            payload.forEach(ship => {\r\n                if (ship.faction === 'axis') {\r\n                    if (ship.country === 'All') {\r\n                        state = {\r\n                            ...state,\r\n                            axis: ['All']\r\n                        }\r\n                    }\r\n                    else {\r\n                        state = {\r\n                            ...state,\r\n                            axis: [...state.axis, ship.country]\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    if (ship.country === 'All') {\r\n                        state = {\r\n                            ...state,\r\n                            allies: ['All']\r\n                        }\r\n                    }\r\n                    else {\r\n                        state = {\r\n                            ...state,\r\n                            allies: [...state.allies, ship.country]\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n            return state;\r\n        default:\r\n            return {\r\n                ...state\r\n            }\r\n    }\r\n}","import {\r\n    SET_ALLIES_POINTS,\r\n    SET_AXIS_POINTS,\r\n    RESET_POINTS\r\n} from '../actions/types';\r\n\r\nconst initialState = {\r\n    allies: 0,\r\n    axis: 0\r\n};\r\n\r\nexport default function (state = initialState, action) {\r\n    const { payload, type } = action;\r\n    switch (type) {\r\n        case SET_ALLIES_POINTS:\r\n\r\n            return {\r\n                ...state,\r\n                allies: state.allies + payload\r\n            }\r\n        case SET_AXIS_POINTS:\r\n            return {\r\n                ...state,\r\n                axis: state.axis + payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","import {\r\n    LOAD_ONE_SHIP, UPDATE_ONE_SHIP, REMOVE_SHIP, TOGGLE_LOCK, REMOVE_ONE_SHIP\r\n} from '../actions/types';\r\n\r\nconst initialState = {\r\n    axis: [],\r\n    allies: []\r\n};\r\n\r\nexport default function (state = initialState, action) {\r\n    const { type, payload } = action;\r\n\r\n    switch (type) {\r\n        case REMOVE_ONE_SHIP:\r\n            let removeOneShipArr = state;\r\n            console.log(payload.name);\r\n            removeOneShipArr.allies = removeOneShipArr.allies.filter(ship => ship.secretName !== payload.name);\r\n            removeOneShipArr.axis = removeOneShipArr.axis.filter(ship => ship.secretName !== payload.name);\r\n\r\n            if (!removeOneShipArr.allies) {\r\n                removeOneShipArr.allies = [];\r\n            }\r\n            if (!removeOneShipArr.axis) {\r\n                removeOneShipArr.axis = [];\r\n            }\r\n            return removeOneShipArr;\r\n        case REMOVE_SHIP:\r\n            let removeArr = state;\r\n            removeArr.allies = removeArr.allies.filter(ship => ship.locked == true);\r\n            removeArr.axis = removeArr.axis.filter(ship => ship.locked == true);\r\n            if (!removeArr.allies) {\r\n                removeArr.allies = [];\r\n            }\r\n            if (!removeArr.axis) {\r\n                removeArr.axis = [];\r\n            }\r\n            return removeArr;\r\n        case TOGGLE_LOCK:\r\n            let toggleArr = state;\r\n            if (payload.faction == 'allies') {\r\n                toggleArr.allies = toggleArr.allies.map(ship => {\r\n                    if (ship.secretName == payload.ship) {\r\n                        return {\r\n                            ...ship,\r\n                            locked: !ship.locked\r\n                        }\r\n                    }\r\n                    else {\r\n                        return {\r\n                            ...ship\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                toggleArr.axis = toggleArr.axis.map(ship => {\r\n                    if (ship.secretName == payload.ship) {\r\n                        return {\r\n                            ...ship,\r\n                            locked: !ship.locked\r\n                        }\r\n                    }\r\n                    else {\r\n                        return {\r\n                            ...ship\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n            return toggleArr;\r\n        case LOAD_ONE_SHIP:\r\n            if (payload.faction == 'axis') {\r\n                let secretName = payload.ship;\r\n                secretName += ' ' + state.axis.filter(ship => ship.name === payload.ship).length;\r\n                return {\r\n                    ...state,\r\n                    axis: [...state.axis, { name: payload.ship, secretName, locked: false }]\r\n                }\r\n            }\r\n            else {\r\n                let secretName = payload.ship;\r\n                secretName += ' ' + state.allies.filter(ship => ship.name === payload.ship).length;\r\n                return {\r\n                    ...state,\r\n                    allies: [...state.allies, { name: payload.ship, secretName, locked: false }]\r\n                }\r\n            }\r\n\r\n        case UPDATE_ONE_SHIP:\r\n            let stateArr = state;\r\n            stateArr.allies = stateArr.allies.map(ship => {\r\n                if (ship.name !== payload.ship) {\r\n                    return ship\r\n                }\r\n                else {\r\n                    let newQuant = ship.quantity + 1;\r\n                    return {\r\n                        ...ship,\r\n                        quantity: newQuant\r\n                    }\r\n                }\r\n            });\r\n            stateArr.axis = stateArr.axis.map(ship => {\r\n                if (ship.name !== payload.ship) {\r\n                    return ship\r\n                }\r\n                else {\r\n                    let newQuant = ship.quantity + 1;\r\n                    return {\r\n                        ...ship,\r\n                        quantity: newQuant\r\n                    }\r\n                }\r\n            });\r\n\r\n            return stateArr;\r\n        default:\r\n            return state\r\n    }\r\n}","import {\r\n    LOAD_IN_SHIPS\r\n} from '../actions/types';\r\n\r\nconst initialState = [];\r\n\r\nexport default function (state = initialState, action) {\r\n    const { payload, type } = action;\r\n\r\n    switch (type) {\r\n        case LOAD_IN_SHIPS:\r\n            state.push(...payload.allies);\r\n            state.push(...payload.axis);\r\n            return state;\r\n        default:\r\n            return state;\r\n    }\r\n}","//importing the combine reducers ability from redux\r\nimport { combineReducers } from 'redux';\r\n\r\nimport userSelection from './userSelections'\r\nimport points from './points';\r\nimport factionPoints from './factionPoints';\r\nimport shipsInPlay from './shipsInPlay';\r\nimport allShips from './allShips';\r\nexport default combineReducers({\r\n    userSelection,\r\n    points,\r\n    factionPoints,\r\n    shipsInPlay,\r\n    allShips\r\n}); ","import {\r\n    SET_POINTS\r\n} from '../actions/types';\r\n\r\nconst initialState = 0;\r\n\r\nexport default function (state = initialState, action) {\r\n    const { payload, type } = action;\r\n\r\n    switch (type) {\r\n        case SET_POINTS:\r\n            if (payload == '') {\r\n                return 0;\r\n            }\r\n            else {\r\n                return Number(payload);\r\n            }\r\n\r\n            break;\r\n        default:\r\n            return state;\r\n    }\r\n}","//imports from npm\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport thunk from 'redux-thunk';\r\n\r\n//importing the root reducer\r\nimport rootReducer from './reducers';\r\n\r\nconst initialState = {};\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(rootReducer,\r\n    initialState,\r\n    composeWithDevTools(applyMiddleware(...middleware))); //boiler plate to get redux and redux devtools up and running\r\nexport default store;","import React, { useEffect } from 'react';\n\nimport Header from './components/Header';\nimport Points from './components/Points';\n\nimport Allies from './components/pickers/Allies';\nimport Axis from './components/pickers/Axis';\n\nimport AlliesList from './components/lists/AlliesList';\nimport AxisList from './components/lists/AxisList';\n\nimport AddtoDB from './components/AddtoDB';\n\n\nimport './app.css';\n\n\nimport { Provider } from 'react-redux';\nimport store from './store';\nfunction App() {\n\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <Header />\n        <div className=\"game-preference-wrapper\">\n          <Points />\n          <Allies />\n          <Axis />\n        </div>\n        <div className=\"card-results\">\n          <AlliesList />\n          <AxisList />\n        </div>\n        <AddtoDB />\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\r\nimport {Document, Page, Text, View, StyleSheet, PDFDownloadLink, Image} from '@react-pdf/renderer';\r\n\r\nconst styles = StyleSheet.create({\r\n    page: {\r\n        flexDirection: \"row\"\r\n    },\r\n    image: {\r\n        width: \"50%\",\r\n        padding: 10\r\n      },\r\n    section: {\r\n        flexGrow: \"1\"\r\n    }\r\n});\r\n\r\nexport const TestPDF = () => {\r\n    return (\r\n        <Document>\r\n            <Page size = \"A4\" style = {styles.page}>\r\n                <View style = {styles.section}>\r\n                    <Text>Hello World!</Text>\r\n                </View>\r\n                <View>\r\n                    <Image style = {styles.image} src = \"http://res.cloudinary.com/dd3ohuzsz/image/upload/v1596653612/qjpi12978vat1mclqpj9.jpg\" />\r\n                </View>\r\n                <View style = {styles.section}>\r\n                    <Text>We're inside a PDF</Text>\r\n                </View>\r\n            </Page>\r\n        </Document>\r\n    )\r\n}\r\n\r\nexport const DownloadApp = () =>{\r\n    return(\r\n        <div>\r\n            <PDFDownloadLink document = {<TestPDF />} fileName = 'pleaseWork.pdf'>\r\n                {({ blob, url, loading, error }) => (loading ? 'Loading document...' : 'Download now!')}\r\n            </PDFDownloadLink>\r\n        </div>\r\n    )\r\n}\r\n\r\n// default TestPDF;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {TestPDF, DownloadApp} from './components/TestPDF';\nReactDOM.render(\n  <App />,document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}