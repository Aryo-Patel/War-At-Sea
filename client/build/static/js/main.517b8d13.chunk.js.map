{"version":3,"sources":["actions/ships.js","actions/types.js","components/Header.js","actions/points.js","components/Points.js","components/pickers/Allies.js","components/pickers/Axis.js","components/lists/AddShips.js","components/lists/ShipsShown.js","components/lists/AlliesList.js","components/lists/AxisList.js","components/AddtoDB.js","reducers/userSelections.js","reducers/factionPoints.js","reducers/shipsInPlay.js","reducers/allShips.js","reducers/index.js","reducers/points.js","store.js","App.js","index.js"],"names":["axios","require","loadOneShip","ship","faction","dispatch","payload","type","updateOneShip","connect","loadAllShips","a","post","ships","headers","shipsAllies","shipsAxis","data","axis","allies","useEffect","console","log","className","setFactionPoints","point","state","points","allShips","userSelection","alliesPoints","factionPoints","axisPoints","shipsInPlay","setPoints","removeShips","useState","currPoints","updatePoints","value","name","onChange","e","target","changePoints","placeholder","onClick","alliesNegativeCounter","forEach","locked","shipFound","filter","allShip","shipList","axisNegativeCounter","shipNation","nation","indexOf","iterCount","index","Math","floor","random","length","splice","currQuant","shipExistence","shipMax","number_available","push","secretName","generateShips","alliesAddAmount","axisAddAmount","resetShips","addShips","props","inputStates","$","each","i","this","attr","click","parseInt","prop","country","parent","text","id","aria-checked","Axis","maxPoints","updateShips","displayShips","updateDisplay","displayArray","axis_nations","shipArray","getShips","Object","keys","class","tempArr","classOrder","sort","ship1","ship2","updateDisplayArray","displayShip","relevantShips","shipName","parentNode","querySelector","textContent","shipInPlay","shipPoints","maxQuant","map","key","DBShip","total","alliesShips","axisShips","toggleLock","removeOneShip","shipInfo","inputs","alliesArray","axisArray","toggleCheckAllies","Array","from","classList","getAttribute","input","checked","toggleCheckAxis","deleteSingleShip","shipIdentifier","split","join","currShip","document","querySelectorAll","allyShip","axisShip","image","src","alt","shipsLoaded","changeShips","units","shipProperties","updateProperties","updateLock","existingShip","updateExistingShip","deleteShip","updateDeleteShip","displayType","updateDisplayType","submitForm","preventDefault","config","body","newFormData","FormData","newMyFile","getElementById","files","append","newLink","put","alert","delete","formData","myFile","link","inputUpdate","updateChangeProps","ready","unbind","hasClass","removeClass","addClass","onSubmit","htmlFor","currShipInfo","changeTargetShip","for","changeDeleteShip","initialState","combineReducers","action","Number","removeOneShipArr","removeArr","toggleArr","stateArr","newQuant","quantity","middleware","thunk","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","App","ReactDOM","render"],"mappings":"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","file":"static/js/main.517b8d13.chunk.js","sourcesContent":["import {\r\n    ADD_SHIP,\r\n    LOAD_IN_SHIPS,\r\n    LOAD_ONE_SHIP,\r\n    UPDATE_ONE_SHIP,\r\n    REMOVE_SHIP,\r\n    TOGGLE_LOCK,\r\n    REMOVE_ONE_SHIP\r\n} from './types';\r\n\r\nconst axios = require('axios');\r\n\r\nexport const addShips = shipList => dispatch => {\r\n    dispatch({\r\n        payload: shipList,\r\n        type: ADD_SHIP\r\n    });\r\n};\r\n\r\nexport const loadOneShip = (ship, faction) => dispatch => {\r\n    dispatch({\r\n        payload: {\r\n            ship,\r\n            faction\r\n        },\r\n        type: LOAD_ONE_SHIP\r\n    })\r\n}\r\n\r\nexport const updateOneShip = (ship, faction) => dispatch => {\r\n    dispatch({\r\n        payload: {\r\n            ship,\r\n            faction\r\n        },\r\n        type: UPDATE_ONE_SHIP\r\n    })\r\n}\r\nexport const removeShips = () => dispatch => {\r\n    dispatch({\r\n        payload: {\r\n        },\r\n        type: REMOVE_SHIP\r\n    })\r\n}\r\nexport const toggleLock = (ship, faction) => dispatch => {\r\n    dispatch({\r\n        payload: {\r\n            ship,\r\n            faction\r\n        },\r\n        type: TOGGLE_LOCK\r\n    });\r\n}\r\nexport const loadAllShips = () => async (dispatch) => {\r\n    let shipsAllies = await axios.post('/ships/selected', { faction: 'allies', ships: ['All'] }, { headers: { \"Content-Type\": 'application/json' } });\r\n    let shipsAxis = await axios.post('/ships/selected', { faction: 'axis', ships: ['All'] }, { headers: { \"Content-Type\": 'application/json' } });\r\n\r\n    shipsAllies = shipsAllies.data;\r\n    shipsAxis = shipsAxis.data;\r\n\r\n    dispatch({\r\n        payload: {\r\n            axis: shipsAxis,\r\n            allies: shipsAllies\r\n        },\r\n        type: LOAD_IN_SHIPS\r\n    })\r\n}\r\n\r\nexport const removeOneShip = (shipInfo) => async dispatch => {\r\n    console.log(shipInfo);\r\n    dispatch({\r\n        payload: shipInfo,\r\n        type: REMOVE_ONE_SHIP\r\n    })\r\n}","export const ADD_SHIP = 'ADD_SHIP';\r\nexport const DELETE_SHIP = 'DELETE_SHIP';\r\n\r\nexport const SET_POINTS = 'SET_POINTS';\r\nexport const SET_ALLIES_POINTS = 'SET_ALLIES_POINTS';\r\nexport const SET_AXIS_POINTS = 'SET_AXIS_POINTS';\r\n\r\nexport const LOAD_ONE_SHIP = 'LOAD_ONE_SHIP';\r\nexport const UPDATE_ONE_SHIP = 'UPDATE_ONE_SHIP';\r\n\r\nexport const INCREMENT_POINTS = 'INCREMENT_POINTS';\r\n\r\nexport const LOAD_IN_SHIPS = 'LOAD_IN_SHIPS';\r\n\r\nexport const REMOVE_SHIP = 'REMOVE_SHIP';\r\nexport const REMOVE_ONE_SHIP = 'REMOVE_ONE_SHIP';\r\n\r\nexport const RESET_POINTS = 'RESET_POINTS';\r\n\r\nexport const TOGGLE_LOCK = 'TOGGLE_LOCK';","import React, { useEffect } from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { loadAllShips } from '../actions/ships';\r\nconst Header = ({ loadAllShips }) => {\r\n    useEffect(() => {\r\n        console.log('in the use effect');\r\n        loadAllShips();\r\n    }, []);\r\n    return (\r\n        <div className=\"header\">\r\n            <span className=\"first-half\">\r\n                <b>War At Sea</b>\r\n            </span>\r\n            <span className=\"second-half\">\r\n                {\" \"}List Generator\r\n            </span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default connect(null, { loadAllShips })(Header);","import {\r\n    SET_POINTS,\r\n    SET_ALLIES_POINTS,\r\n    SET_AXIS_POINTS,\r\n    RESET_POINTS\r\n} from './types';\r\n\r\nexport const setPoints = (point) => dispatch => {\r\n    console.log('called')\r\n    dispatch({\r\n        payload: point,\r\n        type: SET_POINTS\r\n    })\r\n}\r\n\r\n\r\nexport const setFactionPoints = (faction, point) => dispatch => {\r\n    faction === 'allies' ?\r\n        dispatch({\r\n            payload: point,\r\n            type: SET_ALLIES_POINTS\r\n        })\r\n        :\r\n        dispatch({\r\n            payload: point,\r\n            type: SET_AXIS_POINTS\r\n        });\r\n}\r\n\r\nexport const resetPoints = (faction) => dispatch => {\r\n    dispatch({\r\n        payload: faction,\r\n        type: RESET_POINTS\r\n    });\r\n}","import React, { useState, useEffect } from 'react';\r\n\r\nimport { setPoints } from '../actions/points';\r\nimport { connect } from 'react-redux';\r\nimport { loadOneShip, updateOneShip, removeShips } from '../actions/ships';\r\nimport { setFactionPoints } from '../actions/points';\r\n//import shipsInPlay from '../reducers/shipsInPlay';\r\n\r\nconst Points = ({ setPoints, allShips, userSelection, alliesPoints, axisPoints, points, shipsInPlay, loadOneShip, updateOneShip, setFactionPoints, removeShips }) => {\r\n    const [currPoints, updatePoints] = useState('');\r\n\r\n    function changePoints(e) {\r\n\r\n        if (e && e.target.value) {\r\n            updatePoints(e.target.value);\r\n            points = e.target.value;\r\n        }\r\n        else if (e && !e.target.value) {\r\n            updatePoints('');\r\n            points = 0;\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        setPoints(currPoints);\r\n    }, [currPoints]);\r\n\r\n\r\n    function generateShips() {\r\n        let alliesNegativeCounter = 0;\r\n        shipsInPlay.allies.forEach(ship => {\r\n            if (ship.locked == false) {\r\n                let shipFound = allShips.filter(allShip => allShip.name === ship.name);\r\n                alliesNegativeCounter -= shipFound[0].points;\r\n                alliesPoints -= shipFound[0].points;\r\n            }\r\n        });\r\n        let axisNegativeCounter = 0;\r\n        shipsInPlay.axis.forEach(ship => {\r\n            if (ship.locked == false) {\r\n                let shipFound = allShips.filter(allShip => allShip.name === ship.name);\r\n                axisNegativeCounter -= shipFound[0].points;\r\n                axisPoints -= shipFound[0].points;\r\n            }\r\n        });\r\n        setFactionPoints('allies', alliesNegativeCounter);\r\n        setFactionPoints('axis', axisNegativeCounter);\r\n        removeShips();\r\n        //update shipsInPlay\r\n        let shipList;\r\n        if (userSelection.allies[0] === 'All') {\r\n            shipList = allShips.filter(ship => {\r\n                let shipNation = ship.nation;\r\n                let axisNations = ['Italy', 'Finland', 'Japan', 'Germany', 'Axis Neutral/Instalations'];\r\n                return axisNations.indexOf(shipNation) === -1;\r\n            });\r\n        }\r\n        else {\r\n            shipList = allShips.filter(ship => {\r\n                return userSelection.allies.indexOf(ship.nation) !== -1;\r\n            });\r\n        }\r\n\r\n        let iterCount = 0;\r\n        while (alliesPoints < points && shipList.length > 0 && iterCount < allShips.length * 10) {\r\n            iterCount++;\r\n            let index = Math.floor(Math.random() * shipList.length);\r\n            if (alliesPoints + shipList[index].points > points) {\r\n                shipList.splice(index, 1);\r\n            }\r\n            else {\r\n                //check if in shipsInPlay already\r\n                let currQuant = 0;\r\n                let shipExistence = shipsInPlay.allies.filter(ship => ship.name == shipList[index].name);\r\n                console.log(shipsInPlay.allies);\r\n                console.log(shipList[index].name);\r\n                console.log(shipExistence);\r\n                if (shipExistence.length > 0) {\r\n                    currQuant = shipExistence.length;\r\n                }\r\n\r\n                //see if currentQuant = max from all ships\r\n                //if so remove it from ship list\r\n                //otherwise add one to the shipsInPlay quantity\r\n                let shipMax = allShips.filter(ship => ship.name == shipList[index].name);\r\n                shipMax = shipMax[0].number_available;\r\n\r\n                if (shipMax == currQuant) {\r\n                    shipList.splice(index, 1);\r\n                }\r\n                else {\r\n                    if (currQuant === 0) {\r\n                        loadOneShip(shipList[index].name, 'allies');\r\n                        setFactionPoints('allies', shipList[index].points);\r\n                        alliesPoints += shipList[index].points;\r\n                        shipsInPlay.allies.push({\r\n                            name: shipList[index].name,\r\n                            secretName: shipList[index].name + ' 0',\r\n                            locked: false\r\n                        });\r\n                    } else {\r\n                        loadOneShip(shipList[index].name, 'allies');\r\n                        setFactionPoints('allies', shipList[index].points);\r\n                        alliesPoints += shipList[index].points;\r\n                        shipsInPlay.allies.push({\r\n                            name: shipList[index].name,\r\n                            secretName: shipList[index].name + ` ${currQuant}`,\r\n                            locked: false\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n        //update shipsInPlay\r\n        if (userSelection.axis[0] === 'All') {\r\n            shipList = allShips.filter(ship => {\r\n                let shipNation = ship.nation;\r\n                let axisNations = ['Italy', 'Finland', 'Japan', 'Germany', 'Axis Neutral/Instalations'];\r\n                return axisNations.indexOf(shipNation) !== -1;\r\n            });\r\n        }\r\n        else {\r\n            shipList = allShips.filter(ship => {\r\n                return userSelection.axis.indexOf(ship.nation) !== -1;\r\n            });\r\n        }\r\n\r\n        iterCount = 0;\r\n        while (axisPoints < points && shipList.length > 0 && iterCount < allShips.length * 10) {\r\n            iterCount++;\r\n            let index = Math.floor(Math.random() * shipList.length);\r\n            if (axisPoints + shipList[index].points > points) {\r\n                shipList.splice(index, 1);\r\n            }\r\n            else {\r\n                //check if in shipsInPlay already\r\n                let currQuant = 0;\r\n                let shipExistence = shipsInPlay.axis.filter(ship => ship.name == shipList[index].name);\r\n                console.log(shipsInPlay.allies);\r\n                console.log(shipList[index].name);\r\n                console.log(shipExistence);\r\n                if (shipExistence.length > 0) {\r\n                    currQuant = shipExistence.length;\r\n                }\r\n\r\n                //see if currentQuant = max from all ships\r\n                //if so remove it from ship list\r\n                //otherwise add one to the shipsInPlay quantity\r\n                let shipMax = allShips.filter(ship => ship.name == shipList[index].name);\r\n                shipMax = shipMax[0].number_available;\r\n\r\n                if (shipMax == currQuant) {\r\n                    shipList.splice(index, 1);\r\n                }\r\n                else {\r\n                    if (currQuant === 0) {\r\n                        loadOneShip(shipList[index].name, 'axis');\r\n                        setFactionPoints('axis', shipList[index].points);\r\n                        axisPoints += shipList[index].points;\r\n                        shipsInPlay.axis.push({\r\n                            name: shipList[index].name,\r\n                            secretName: shipList[index].name + ' 0',\r\n                            locked: false\r\n                        });\r\n                    } else {\r\n                        loadOneShip(shipList[index].name, 'axis');\r\n                        setFactionPoints('axis', shipList[index].points);\r\n                        axisPoints += shipList[index].points;\r\n                        shipsInPlay.axis.push({\r\n                            name: shipList[index].name,\r\n                            secretName: shipList[index].name + ` ${currQuant}`,\r\n                            locked: false\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n    function resetShips(e) {\r\n        removeShips();\r\n\r\n        /*\r\n        All the unwanted ships should be removed, so you can reset the point total to zero and then \r\n        add in the points of the ships that are still in play\r\n\r\n        */\r\n        setFactionPoints('allies', -alliesPoints);\r\n        setFactionPoints('axis', -axisPoints);\r\n\r\n        let alliesAddAmount = 0;\r\n        let axisAddAmount = 0;\r\n        shipsInPlay.allies.forEach(ship => {\r\n            let shipFound = allShips.filter(allShip => allShip.name === ship.name);\r\n\r\n            alliesAddAmount += shipFound[0].points;\r\n\r\n        });\r\n        shipsInPlay.axis.forEach(ship => {\r\n            let shipFound = allShips.filter(allShip => allShip.name === ship.name);\r\n            axisAddAmount += shipFound[0].points;\r\n        });\r\n        setFactionPoints('allies', alliesAddAmount);\r\n        setFactionPoints('axis', axisAddAmount);\r\n    }\r\n    return (\r\n        <div className=\"points-wrapper\">\r\n            <input type=\"number\" value={currPoints} name=\"points\" onChange={e => changePoints(e)} className=\"point-wrapper-placeholder\" placeholder=\"Point Limit\" />\r\n            <button className=\"RANDOM\" onClick={e => generateShips(e)}>RANDOM</button>\r\n            <button className=\"RESET\" onClick={e => resetShips(e)}>RESET</button>\r\n        </div>\r\n    )\r\n}\r\nconst mapStateToProps = state => ({\r\n    points: state.points,\r\n    allShips: state.allShips,\r\n    userSelection: state.userSelection,\r\n    alliesPoints: state.factionPoints.allies,\r\n    axisPoints: state.factionPoints.axis,\r\n    shipsInPlay: state.shipsInPlay\r\n})\r\nexport default connect(mapStateToProps, { setPoints, loadOneShip, updateOneShip, setFactionPoints, removeShips })(Points);","import React, { useEffect } from 'react';\r\nimport $ from 'jquery';\r\nimport { addShips } from '../../actions/ships';\r\nimport { connect } from 'react-redux';\r\nconst Allies = (props) => {\r\n    const inputStates = [];\r\n    useEffect(() => {\r\n        $('input[type=radio]').each(function (i) {\r\n            $(this).attr('name', i + \"\");\r\n            inputStates.push(false);\r\n\r\n        })\r\n        $('input[type=radio]').click(function (e) {\r\n            let addShips = [];\r\n            let index = parseInt($(this).prop('name'));\r\n            if (index === 0) {\r\n                for (let i = 1; i < 12; i++) {\r\n                    $(`[name=${i + \"\"}]`).prop('checked', false);\r\n                    inputStates[i] = false;\r\n                }\r\n            }\r\n            else if (index === 12) {\r\n                for (let i = 13; i < inputStates.length; i++) {\r\n                    $(`[name=${i + \"\"}]`).prop('checked', false);\r\n                    inputStates[i] = false;\r\n                }\r\n            }\r\n            else if (index < 12) {\r\n                $(`[name=0]`).prop('checked', false);\r\n                inputStates[0] = false;\r\n            }\r\n            else {\r\n                $(`[name=12]`).prop('checked', false);\r\n                inputStates[12] = false;\r\n            }\r\n            inputStates[index] = !inputStates[index];\r\n            if (!inputStates[index]) {\r\n                $(this).prop('checked', false);\r\n            }\r\n            inputStates.forEach((state, index) => {\r\n                if (state === true) {\r\n                    let country = $(`[name=${index}]`).parent().text();\r\n                    let faction;\r\n                    if (index < 12) {\r\n                        faction = 'allies';\r\n                    }\r\n                    else {\r\n                        faction = 'axis';\r\n                    }\r\n                    addShips.push({\r\n                        country,\r\n                        faction\r\n                    });\r\n\r\n                }\r\n            });\r\n            props.addShips(addShips);\r\n        });\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"allies-wrapper\">\r\n            <div className=\"allies-text-wrapper\">\r\n                <h4 className=\"allies-text\">Allies Faction</h4>\r\n            </div>\r\n            <div className=\"allies-items\">\r\n                <label className=\"container\" id=\"all\" aria-checked=\"false\">All\r\n                    <input type=\"radio\" />\r\n                    <span className=\"checkmark\"></span>\r\n\r\n                </label>\r\n                <label className=\"container\" id=\"france\">\r\n                    <input type=\"radio\" />\r\n                    <span className=\"checkmark\"></span>\r\n                    France\r\n                </label>\r\n                <label className=\"container\" id=\"new-zealand\">\r\n                    <input type=\"radio\" />\r\n                    <span className=\"checkmark\"></span>\r\n                    New Zealand\r\n                </label>\r\n                <label className=\"container\" id=\"united-kingdom\">\r\n                    <input type=\"radio\" />\r\n                    <span className=\"checkmark\"></span>\r\n                    United Kingdom\r\n                </label>\r\n                <label className=\"container\" id=\"australia\">\r\n                    <input type=\"radio\" />\r\n                    <span className=\"checkmark\"></span>\r\n                    Australia\r\n                </label>\r\n                <label className=\"container\" id=\"greece\">\r\n                    <input type=\"radio\" />\r\n                    <span className=\"checkmark\"></span>\r\n                    Greece\r\n                </label>\r\n                <label className=\"container\" id=\"poland\">\r\n                    <input type=\"radio\" />\r\n                    <span className=\"checkmark\"></span>\r\n                    Poland\r\n                </label>\r\n                <label className=\"container\" id=\"united-states\">\r\n                    <input type=\"radio\" />\r\n                    <span className=\"checkmark\"></span>\r\n                    United States\r\n                </label>\r\n                <label className=\"container\" id=\"canada\">\r\n                    <input type=\"radio\" />\r\n                    <span className=\"checkmark\"></span>\r\n                    Canada\r\n                </label>\r\n                <label className=\"container\" id=\"netherlands\">\r\n                    <input type=\"radio\" />\r\n                    <span className=\"checkmark\"></span>\r\n                    Netherlands\r\n                </label>\r\n                <label className=\"container\" id=\"soviet-union\">\r\n                    <input type=\"radio\" />\r\n                    <span className=\"checkmark\"></span>\r\n                    Soviet Union\r\n                </label>\r\n                <label className=\"container\" id=\"neutral\">\r\n                    <input type=\"radio\" />\r\n                    <span className=\"checkmark\"></span>\r\n                    Allies Neutral / Instalations\r\n                </label>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default connect(null, { addShips })(Allies);","import React from 'react';\r\n\r\nconst Axis = props => {\r\n\r\n\r\n    return (\r\n        <div className=\"axis-wrapper\">\r\n            <div className=\"axis-text-wrapper\">\r\n                <h4 className=\"axis-text\">Axis Faction</h4>\r\n            </div>\r\n            <div className=\"axis-items\">\r\n                <label className=\"container\" id=\"all\">\r\n                    <input type=\"radio\" />\r\n                    <span className=\"checkmark\"></span>\r\n                    All\r\n                </label>\r\n                <label className=\"container\" id=\"italy\">\r\n                    <input type=\"radio\" />\r\n                    <span className=\"checkmark\"></span>\r\n                    Italy\r\n                </label>\r\n                <label className=\"container\" id=\"finland\">\r\n                    <input type=\"radio\" />\r\n                    <span className=\"checkmark\"></span>\r\n                    Finland\r\n                </label>\r\n                <label className=\"container\" id=\"japan\">\r\n                    <input type=\"radio\" />\r\n                    <span className=\"checkmark\"></span>\r\n                    Japan\r\n                </label>\r\n                <label className=\"container\" id=\"germany\">\r\n                    <input type=\"radio\" />\r\n                    <span className=\"checkmark\"></span>\r\n                    Germany\r\n                </label>\r\n                <label className=\"container\" id=\"neutral\">\r\n                    <input type=\"radio\" />\r\n                    <span className=\"checkmark\"></span>\r\n                    Axis Neutral / Instalations\r\n                </label>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default Axis;","import React, { useEffect, useState, Fragment } from 'react';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { loadOneShip, updateOneShip } from '../../actions/ships';\r\nimport { setFactionPoints } from '../../actions/points';\r\nimport axios from 'axios';\r\nconst AddShips = ({ allies, axis, faction, shipsInPlay, allShips, loadOneShip, updateOneShip, setFactionPoints, alliesPoints, axisPoints, maxPoints }) => {\r\n    const [ships, updateShips] = useState([]);\r\n    const [displayShips, updateDisplay] = useState([]);\r\n    let displayArray = {};\r\n\r\n    let axis_nations = ['Italy', 'Finland', 'Japan', 'Germany', 'Axis Neutral/Installations'];\r\n    useEffect(() => {\r\n        async function getShips() {\r\n            let data;\r\n            faction === 'axis' ? data = axis : data = allies;\r\n            let shipArray = await axios.post('/ships/selected', { ships: data, faction }, { headers: { 'Content-Type': 'application/json' } });\r\n\r\n            updateShips(shipArray.data);\r\n        }\r\n        getShips();\r\n    }, []);\r\n    useEffect(() => {\r\n        console.log(displayShips);\r\n    }, [displayShips]);\r\n    useEffect(() => {\r\n        updateDisplayArray();\r\n    }, [ships]);\r\n    let i = 0;\r\n\r\n    function updateDisplayArray() {\r\n        ships.forEach(ship => {\r\n            if (Object.keys(displayArray).indexOf(ship.nation) == -1) {\r\n                displayArray[ship.nation] = [{\r\n                    name: ship.name,\r\n                    number_available: ship.number_available,\r\n                    class: ship.class,\r\n                    points: ship.points\r\n                }];\r\n\r\n            }\r\n            else {\r\n                console.log(displayArray);\r\n                displayArray[ship.nation].push({\r\n                    name: ship.name,\r\n                    number_available: ship.number_available,\r\n                    class: ship.class,\r\n                    points: ship.points\r\n                })\r\n            }\r\n        });\r\n        console.log(displayArray);\r\n        let tempArr = [];\r\n        let classOrder = ['B', 'CV', 'C', 'D', 'PB', 'S', 'AP', 'A', 'AC'];\r\n        Object.keys(displayArray).forEach(nation => {\r\n            let shipArray = displayArray[nation];\r\n            shipArray.sort((ship1, ship2) => {\r\n                if(classOrder.indexOf(ship1.class) !== -1 && classOrder.indexOf(ship2.class) !== -1){\r\n                    if(classOrder.indexOf(ship1.class) - classOrder.indexOf(ship2.class) == 0){\r\n                        if(ship1.points - ship2.points == 0){\r\n                            return ship1.name - ship2.name\r\n                        }\r\n                        return ship1.points - ship2.points;\r\n                    }\r\n                    return classOrder.indexOf(ship1.class) - classOrder.indexOf(ship2.class);\r\n                }\r\n                else{\r\n                    console.log('no sorting done');\r\n                    console.log(ship1);\r\n                    console.log(ship2);\r\n                    return;\r\n                }\r\n            });\r\n            tempArr.push({\r\n                nation,\r\n                ships: shipArray\r\n            })\r\n        });\r\n        updateDisplay([...displayShips, ...tempArr]);\r\n\r\n    }\r\n    function displayShip(e, nation) {\r\n        console.log(nation);\r\n        let relevantShips = displayShips.filter(ship => {\r\n            if (ship.nation === nation) {\r\n                return ship;\r\n            }\r\n        });\r\n\r\n        relevantShips = relevantShips[0].ships;\r\n\r\n        //find the individual ship\r\n        let shipName = e.target.parentNode.querySelector('[name=ship]').textContent;\r\n\r\n        //check to see whether the ship is in ships in play\r\n        let shipInPlay = shipsInPlay.filter(ship => ship.name === shipName);\r\n\r\n        //update redux to include that ship in the ships in play if necessary\r\n        if (shipInPlay.length === 0) {\r\n\r\n            console.log(shipName);\r\n            let shipPoints = allShips.filter(ship => ship.name === shipName);\r\n            console.log(shipPoints);\r\n            let faction;\r\n            shipPoints = shipPoints[0];\r\n            if (axis_nations.indexOf(shipPoints.nation) == -1) {\r\n                faction = 'allies';\r\n            }\r\n            else {\r\n                faction = 'axis';\r\n            }\r\n            console.log(faction);\r\n            shipPoints = shipPoints.points;\r\n            if (faction === 'allies') {\r\n                if (alliesPoints + shipPoints <= maxPoints) {\r\n                    loadOneShip(shipName, faction);\r\n                    setFactionPoints(faction, shipPoints);\r\n                }\r\n\r\n            }\r\n            else {\r\n                if (axisPoints + shipPoints <= maxPoints) {\r\n                    loadOneShip(shipName, faction);\r\n                    setFactionPoints(faction, shipPoints);\r\n                }\r\n            }\r\n\r\n\r\n        }\r\n        else {\r\n            let currQuant = shipInPlay.length;\r\n\r\n            let maxQuant = allShips.filter(ship => ship.name === shipName);\r\n\r\n            maxQuant = maxQuant[0].number_available;\r\n\r\n            if (currQuant < maxQuant) {\r\n                let shipPoints = allShips.filter(ship => ship.name === shipName);\r\n                shipPoints = shipPoints[0];\r\n                let faction;\r\n                if (axis_nations.indexOf(shipPoints.nation) == -1) {\r\n                    faction = 'allies'\r\n                }\r\n                else {\r\n                    faction = 'axis';\r\n                }\r\n\r\n                shipPoints = shipPoints.points;\r\n                if (faction == 'allies') {\r\n                    if (alliesPoints + shipPoints <= maxPoints) {\r\n                        loadOneShip(shipName, faction);\r\n                        setFactionPoints(faction, shipPoints);\r\n                    }\r\n                }\r\n                else {\r\n                    if (axisPoints + shipPoints <= maxPoints) {\r\n                        loadOneShip(shipName, faction);\r\n                        setFactionPoints(faction, shipPoints);\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n\r\n            }\r\n        }\r\n\r\n        //extract the point total, subtract one from the total amount present\r\n\r\n    }\r\n    return (\r\n        <div id=\"add-ship\">\r\n            {/* <p id=\"minimize\"> [+]</p>\r\n            <p id=\"close\">X</p> */}\r\n            <div id=\"ship-content\">\r\n                {faction === 'allies' ? (\r\n                    displayShips.map(nation => {\r\n                        //console.log(nation);\r\n                        return (\r\n                            <div className=\"ship-wrapper\">\r\n                                <p key={i++} className=\"header-text\">{nation.nation}</p>\r\n                                {nation.ships.map(ship => {\r\n                                    //console.log(shipsInPlay);\r\n                                    let shipExistence = shipsInPlay.filter(DBShip => DBShip.name === ship.name);\r\n\r\n                                    let total = shipExistence.length > 0 ? ship.number_available - shipExistence.length : ship.number_available;\r\n                                    return (\r\n                                        total > 0 ? (\r\n                                            <div className=\"ship-content-holder\" onClick={e => displayShip(e, nation.nation)}>\r\n                                                <p key={i++} name=\"ship\" className=\"ship\">{ship.name}</p>\r\n                                                <p key={i++} name=\"class\" className=\"class\">Class: {ship.class ? ship.class : 'N/A'}</p>\r\n                                                <p key={i++} name=\"number-available\" className=\"number-available\">\r\n                                                    Qty: {total}\r\n                                                </p>\r\n                                                <p key={i++} name=\"point-value\" className=\"point-value\">Pts: {ship.points}</p>\r\n\r\n                                            </div>\r\n                                        )\r\n                                            :\r\n                                            <Fragment></Fragment>\r\n                                    )\r\n                                }\r\n                                )}\r\n                            </div>\r\n\r\n                        )\r\n                    })\r\n                ) :\r\n                    (\r\n                        displayShips.map(nation => {\r\n\r\n                            return (\r\n                                <div className=\"ship-wrapper\">\r\n                                    <p key={i++} className=\"header-text\">{nation.nation}</p>\r\n                                    {nation.ships.map(ship => {\r\n                                        //console.log(shipsInPlay);\r\n                                        let shipExistence = shipsInPlay.filter(DBShip => DBShip.name === ship.name);\r\n\r\n                                        let total = shipExistence.length > 0 ? ship.number_available - shipExistence.length : ship.number_available;\r\n                                        return (\r\n                                            total > 0 ? (\r\n                                                <div className=\"ship-content-holder\" onClick={e => displayShip(e, nation.nation)}>\r\n                                                    <p key={i++} name=\"ship\" className=\"ship\">{ship.name}</p>\r\n                                                    <p key={i++} name=\"class\" className=\"class\">Class: {ship.class ? ship.class : 'N/A'}</p>\r\n                                                    <p key={i++} name=\"number-available\" className=\"number-available\">\r\n                                                        Qty: {total}\r\n                                                    </p>\r\n                                                    <p key={i++} name=\"point-value\" className=\"point-value\">Pts: {ship.points}</p>\r\n                                                </div>\r\n                                            )\r\n                                                :\r\n                                                <Fragment></Fragment>\r\n                                        )\r\n                                    }\r\n                                    )}\r\n                                </div>\r\n\r\n                            )\r\n                        })\r\n                    )}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nAddShips.propTypes = {\r\n    allies: PropTypes.array,\r\n    axis: PropTypes.array\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n\r\n    allies: state.userSelection.allies,\r\n    axis: state.userSelection.axis,\r\n    allShips: state.allShips,\r\n    shipsInPlay: [...state.shipsInPlay.allies, ...state.shipsInPlay.axis],\r\n    alliesPoints: state.factionPoints.allies,\r\n    axisPoints: state.factionPoints.axis,\r\n    maxPoints: state.points\r\n})\r\n\r\nexport default connect(mapStateToProps, { loadOneShip, updateOneShip, setFactionPoints })(AddShips);","import React, { useEffect } from 'react';\r\n\r\n\r\nimport { connect } from 'react-redux';\r\nimport { toggleLock, removeOneShip } from '../../actions/ships';\r\nimport { setFactionPoints } from '../../actions/points';\r\n// import shipsInPlay from '../../reducers/shipsInPlay';\r\nconst ShipsShown = props => {\r\n    const { alliesShips, axisShips, faction, allShips, toggleLock, removeOneShip, setFactionPoints } = props;\r\n    let alliesArray = [];\r\n    let axisArray = [];\r\n    let inputs;\r\n    useEffect(() => {\r\n        inputs = document.querySelectorAll('inputs[class=no-pointer');\r\n        console.log(inputs);\r\n    }, [alliesShips, axisShips]);\r\n    allShips.forEach(ship => {\r\n        alliesShips.forEach(allyShip => {\r\n            if (allyShip.name === ship.name && ship.nation !== 'Axis Neutral / Instalations') {\r\n                alliesArray.push({ ...ship, secretName: allyShip.secretName, locked: allyShip.locked });\r\n\r\n            }\r\n        });\r\n        axisShips.forEach(axisShip => {\r\n            if (axisShip.name === ship.name && ship.nation !== 'Allies Neutral / Instalations') {\r\n                axisArray.push({ ...ship, secretName: axisShip.secretName, locked: axisShip.locked });\r\n            }\r\n        });\r\n    });\r\n\r\n    function toggleCheckAllies(e) {\r\n        let classArr = Array.from(e.target.classList);\r\n        if (classArr.indexOf('fa') == -1) {\r\n            let shipName = e.target.getAttribute('name');\r\n            console.log(shipName);\r\n            toggleLock(shipName, 'allies');\r\n\r\n            let input = e.target.querySelector('input');\r\n            if (input) {\r\n                input.checked = !input.checked;\r\n            }\r\n        }\r\n    }\r\n    function toggleCheckAxis(e) {\r\n        let classArr = Array.from(e.target.classList);\r\n        if (classArr.indexOf('fa') == -1) {\r\n            let shipName = e.target.getAttribute('name');\r\n            console.log(shipName);\r\n            toggleLock(shipName, 'axis');\r\n\r\n            let input = e.target.querySelector('input');\r\n            if (input) {\r\n                input.checked = !input.checked;\r\n            }\r\n        }\r\n    }\r\n    function deleteSingleShip(e) {\r\n        let shipName = e.target.getAttribute('name');\r\n        removeOneShip({ name: e.target.getAttribute('name') });\r\n        let shipIdentifier = shipName.split(' ');\r\n        shipIdentifier.splice(shipIdentifier.length - 1, 1);\r\n        shipIdentifier = shipIdentifier.join(' ');\r\n        console.log(shipIdentifier);\r\n        let currShip = allShips.filter(ship => ship.name === shipIdentifier);\r\n        currShip = currShip[0];\r\n        console.log(currShip);\r\n        let axisNations = ['Italy', 'Finland', 'Japan', 'Germany', 'Axis Neutral/Instalations'];\r\n        if (axisNations.indexOf(currShip.nation) !== -1) {\r\n            setFactionPoints('axis', -currShip.points);\r\n        }\r\n        else {\r\n            setFactionPoints('allies', -currShip.points);\r\n        }\r\n    }\r\n    let i = 0;\r\n    return (\r\n        <div className=\"display-ship-wrapper\">\r\n            {faction === 'allies' ? (\r\n                alliesArray.map(allyShip => {\r\n                    //let currShip = alliesShips.filter(ship => ship.secretName == allyShip.secetName);\r\n                    return (\r\n                        allyShip.image ?\r\n                            <div key={i++} className=\"ship-wrapper\" name={allyShip.secretName} onClick={e => toggleCheckAllies(e)}>\r\n                                <span key={i++} className=\"no-pointer\">Lock: </span>\r\n\r\n                                {allyShip.locked ? <input key={i++} className=\"no-pointer\" name={allyShip.secretName} type=\"checkbox\" checked /> :\r\n                                    <input key={i++} className=\"no-pointer\" name={allyShip.secretName} type=\"checkbox\" />}\r\n                                <i name={allyShip.secretName} className=\"fa fa-trash delete\" onClick={e => deleteSingleShip(e)}></i>\r\n                                <div key={i++} className=\"ship-placard no-pointer\">\r\n                                    <img key={i++} className=\"image-ship-placard no-pointer\" src={allyShip.image} alt={allyShip.name} />\r\n                                </div>\r\n                            </div>\r\n                            :\r\n                            <div key={i++} className=\"ship-wrapper\" name={allyShip.secretName} onClick={e => toggleCheckAllies(e)}>\r\n                                <span key={i++} className=\"no-pointer\">Lock: </span>\r\n\r\n                                {allyShip.locked ? <input key={i++} className=\"no-pointer\" name={allyShip.secretName} type=\"checkbox\" checked /> :\r\n                                    <input key={i++} className=\"no-pointer\" name={allyShip.secretName} type=\"checkbox\" />}\r\n                                <i name={allyShip.secretName} className=\"fa fa-trash delete\" onClick={e => deleteSingleShip(e)}></i>\r\n                                <div key={i++} className=\"ship-placard no-pointer\">\r\n                                    <h3 key={i++} className=\"no-pointer\">{allyShip.name}</h3>\r\n                                    <h5 key={i++} className=\"no-pointer\">{allyShip.nation}</h5>\r\n                                    <h5 key={i++} className=\"no-pointer\">{allyShip.points}</h5>\r\n                                </div>\r\n                            </div>\r\n                    )\r\n                }\r\n                )\r\n            )\r\n                :\r\n                (\r\n                    axisArray.map(axisShip => {\r\n                        //let currShip = alliesShips.filter(ship => ship.secretName == axisShip.secetName);\r\n                        return (\r\n                            axisShip.image ?\r\n                                <div key={i++} className=\"ship-wrapper\" name={axisShip.secretName} onClick={e => toggleCheckAxis(e)}>\r\n                                    <span key={i++} className=\"no-pointer\">Lock: </span>\r\n\r\n                                    {axisShip.locked ? <input key={i++} className=\"no-pointer\" name={axisShip.secretName} type=\"checkbox\" checked /> :\r\n                                        <input key={i++} className=\"no-pointer\" name={axisShip.secretName} type=\"checkbox\" />}\r\n                                    <i name={axisShip.secretName} className=\"fa fa-trash delete\" onClick={e => deleteSingleShip(e)}></i>\r\n                                    <div key={i++} className=\"ship-placard no-pointer\">\r\n                                        <img key={i++} className=\"image-ship-placard no-pointer\" src={axisShip.image} alt={axisShip.name} />\r\n                                    </div>\r\n                                </div>\r\n                                :\r\n                                <div key={i++} className=\"ship-wrapper\" name={axisShip.secretName} onClick={e => toggleCheckAxis(e)}>\r\n                                    <span key={i++} className=\"no-pointer\">Lock: </span>\r\n\r\n                                    {axisShip.locked ? <input key={i++} className=\"no-pointer\" name={axisShip.secretName} type=\"checkbox\" checked /> :\r\n                                        <input key={i++} className=\"no-pointer\" name={axisShip.secretName} type=\"checkbox\" />}\r\n                                    <i name={axisShip.secretName} className=\"fa fa-trash delete\" onClick={e => deleteSingleShip(e)}></i>\r\n                                    <div key={i++} className=\"ship-placard no-pointer\">\r\n                                        <h3 key={i++} className=\"no-pointer\">{axisShip.name}</h3>\r\n                                        <h5 key={i++} className=\"no-pointer\">{axisShip.nation}</h5>\r\n                                        <h5 key={i++} className=\"no-pointer\">{axisShip.points}</h5>\r\n                                    </div>\r\n                                </div>\r\n                        )\r\n                    }\r\n                    )\r\n                )}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    alliesShips: state.shipsInPlay.allies,\r\n    axisShips: state.shipsInPlay.axis,\r\n    allShips: state.allShips,\r\n});\r\n\r\nexport default connect(mapStateToProps, { toggleLock, removeOneShip, setFactionPoints })(ShipsShown);","import React, { useState } from 'react';\r\nimport AddShips from './AddShips';\r\nimport ShipsShown from './ShipsShown';\r\n\r\nimport { connect } from 'react-redux';\r\nconst AlliesList = ({ points, alliesPoints }) => {\r\n\r\n    const [shipsLoaded, changeShips] = useState(false);\r\n\r\n    function addAllies() {\r\n        changeShips(!shipsLoaded);\r\n    }\r\n    return (\r\n        <div className=\"allies-list-wrapper\">\r\n            <div className=\"allies-list-header-wrapper\">\r\n                <div className=\"text-wrapper\">\r\n                    <h4>Allies list</h4>\r\n                    <p>{alliesPoints} / {points}</p>\r\n                </div>\r\n                <div className=\"save-options\">\r\n\r\n                    <i className=\"fa fa-print\"></i>\r\n                    <i className=\"fa fa-file-pdf-o\"></i>\r\n                </div>\r\n            </div>\r\n            <div className=\"line\">\r\n                <hr />\r\n            </div>\r\n            <div className=\"add-unit\">\r\n                <ShipsShown faction='allies' />\r\n\r\n                <p onClick={e => addAllies(e)}>[{shipsLoaded ? '-' : '+'}] Add Unit</p>\r\n                {shipsLoaded && (\r\n                    <AddShips faction=\"allies\" />\r\n                )}\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    points: state.points,\r\n    alliesPoints: state.factionPoints.allies\r\n})\r\n\r\nexport default connect(mapStateToProps, {})(AlliesList);","import React, { useState } from 'react';\r\nimport AddShips from './AddShips';\r\nimport ShipsShown from './ShipsShown';\r\nimport { connect } from 'react-redux';\r\n\r\nconst AxisList = ({ points, axisPoints }) => {\r\n    const [shipsLoaded, changeShips] = useState(false);\r\n\r\n    function addAxis() {\r\n        changeShips(!shipsLoaded);\r\n    }\r\n    return (\r\n        <div className=\"axis-list-wrapper\">\r\n            <div className=\"axis-list-header-wrapper\">\r\n                <div className=\"text-wrapper\">\r\n                    <h4>Axis list</h4>\r\n                    <p>{axisPoints} / {points}</p>\r\n                </div>\r\n                <div className=\"save-options\">\r\n                    <i className=\"fa fa-print\"></i>\r\n                    <i className=\"fa fa-file-pdf-o\"></i>\r\n                </div>\r\n            </div>\r\n            <div className=\"line\">\r\n                <hr />\r\n            </div>\r\n            <div className=\"add-unit\">\r\n                <ShipsShown faction='axis' />\r\n                <p onClick={e => addAxis(e)}>[{shipsLoaded ? '-' : '+'}] Add Unit</p>\r\n                {shipsLoaded && (\r\n                    <AddShips faction=\"axis\" />\r\n                )}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    points: state.points,\r\n    axisPoints: state.factionPoints.axis\r\n})\r\n\r\nexport default connect(mapStateToProps, {})(AxisList);","import React, { useState, useEffect, Fragment } from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\nconst axios = require('axios');\r\nconst $ = require('jquery');\r\n\r\n\r\n\r\n\r\nconst AddtoDB = ({ allShips }) => {\r\n    const [shipProperties, updateProperties] = useState({\r\n        nation: \"\",\r\n        units: \"\",\r\n        name: \"\",\r\n        points: \"\",\r\n        class: \"\",\r\n        image: \"\"\r\n    });\r\n    const [locked, updateLock] = useState(true);\r\n    const [existingShip, updateExistingShip] = useState({\r\n        nation: \"\",\r\n        units: \"\",\r\n        name: \"\",\r\n        points: \"\",\r\n        class: \"\",\r\n        image: \"\"\r\n    });\r\n\r\n    const [deleteShip, updateDeleteShip] = useState({\r\n        name: ''\r\n    });\r\n    useEffect(() => {\r\n        console.log(existingShip);\r\n    }, [existingShip]);\r\n\r\n    const [displayType, updateDisplayType] = useState('new ship');\r\n\r\n\r\n    $(document).ready(function () {\r\n        $('#add-new-ship').unbind().click(function () {\r\n            updateDisplayType('new ship');\r\n            if ($(this).hasClass('non-selected')) {\r\n                $(this).removeClass('non-selected');\r\n                $('#update-existing-ship').addClass('non-selected');\r\n                $('#delete-existing-ship').addClass('non-selected');\r\n            }\r\n        });\r\n        $('#update-existing-ship').unbind().click(function () {\r\n            updateDisplayType('update ship');\r\n            if ($(this).hasClass('non-selected')) {\r\n                $(this).removeClass('non-selected');\r\n                $('#add-new-ship').addClass('non-selected');\r\n                $('#delete-existing-ship').addClass('non-selected');\r\n            }\r\n        });\r\n        $('#delete-existing-ship').unbind().click(function () {\r\n            updateDisplayType('delete ship');\r\n            if ($(this).hasClass('non-selected')) {\r\n                $(this).removeClass('non-selected');\r\n                $('#add-new-ship').addClass('non-selected');\r\n                $('#update-existing-ship').addClass('non-selected');\r\n            }\r\n        })\r\n\r\n    })\r\n    async function submitForm(e) {\r\n        e.preventDefault();\r\n        if (!locked) {\r\n            if (displayType === 'new ship') {\r\n                if (shipProperties.name !== \"\" && shipProperties.nation !== \"\" && shipProperties.units !== \"\" && shipProperties.points !== \"\") {\r\n                    const config = {\r\n                        headers: {\r\n                            'Content-Type': \"application/json\"\r\n                        }\r\n                    };\r\n\r\n                    try {\r\n                        const body = shipProperties;\r\n                        console.log(shipProperties);\r\n\r\n                        let newFormData = new FormData();\r\n                        let newMyFile = document.getElementById('new-image');\r\n                        let newLink;\r\n                        if (newMyFile.files[0]) {\r\n                            console.log('inside the file statement');\r\n                            newFormData.append('image', newMyFile.files[0], newMyFile.files[0].name);\r\n                            let data = await axios.post('/ships/ship-url', newFormData);\r\n\r\n                            newLink = data.data;\r\n                            console.log(newLink);\r\n                            body.image = newLink;\r\n\r\n                            await axios.put('/ships', body, config);\r\n                            alert('Ship added with image');\r\n                        }\r\n                        else {\r\n                            await axios.put('/ships', body, config);\r\n                            alert('Ship added with no image');\r\n                        }\r\n                    } catch (err) {\r\n                        console.log(err);\r\n                        alert('Error adding new ship');\r\n                    }\r\n                }\r\n                else {\r\n                    alert(\"Info not filled out completely\");\r\n                }\r\n            }\r\n            else if (displayType === 'delete ship') {\r\n                console.log(deleteShip);\r\n                try {\r\n                    await axios.delete('/ships/ship', { data: deleteShip }, { headers: { 'Content-Type': \"application/json\" } });\r\n                    alert('Successfully deleted ' + deleteShip.name);\r\n                }\r\n                catch (err) {\r\n                    alert('Error deleting ' + deleteShip.name);\r\n                }\r\n            }\r\n            else {\r\n                let formData = new FormData();\r\n                let myFile = document.getElementById('update-image');\r\n                let link;\r\n                const config = {\r\n                    headers: {\r\n                        'Content-Type': \"application/json\"\r\n                    }\r\n                };\r\n                if (myFile.files[0]) {\r\n                    console.log('inside the file statement');\r\n                    formData.append('image', myFile.files[0], myFile.files[0].name);\r\n                    let data = await axios.post('/ships/ship-url', formData);\r\n\r\n                    link = data.data;\r\n                    console.log(link);\r\n                    let body = existingShip;\r\n                    body.image = link;\r\n                    await axios.put('/ships/update', body, config);\r\n                    // updateExistingShip({\r\n                    //     ...existingShip,\r\n                    //     image: link\r\n                    // });\r\n                    alert('Update complete');\r\n                    console.log('existingShip should be updated now');\r\n                }\r\n                else {\r\n                    //console.log(existingShip);\r\n                    await axios.put('/ships/update', existingShip, config);\r\n                    alert('Update complete');\r\n                }\r\n\r\n\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    function inputUpdate(e) {\r\n        updateProperties({\r\n            ...shipProperties,\r\n            [e.target.name]: e.target.value\r\n        });\r\n    }\r\n\r\n    function changeTargetShip(e) {\r\n        let shipName = e.target.value;\r\n\r\n        let currShipInfo = allShips.filter(ship => ship.name === shipName);\r\n        currShipInfo = currShipInfo[0];\r\n        updateExistingShip({\r\n            nation: currShipInfo.nation,\r\n            class: currShipInfo.class,\r\n            points: currShipInfo.points,\r\n            units: currShipInfo.number_available,\r\n            name: currShipInfo.name,\r\n            image: currShipInfo.image ? currShipInfo.image : '',\r\n            class: currShipInfo.class ? currShipInfo.class : ''\r\n        });\r\n    }\r\n    function updateChangeProps(e) {\r\n        updateExistingShip({\r\n            ...existingShip,\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n    function changeDeleteShip(e) {\r\n        let shipName = e.target.value;\r\n        updateDeleteShip({\r\n            ...deleteShip,\r\n            name: shipName\r\n        });\r\n    }\r\n    function passwordCheck(e) {\r\n        let password = document.getElementById('auth-pass').value;\r\n        if (password === 'floatilla') {\r\n            updateLock(false);\r\n            document.getElementById('auth-pass').value = \"\";\r\n        }\r\n        else {\r\n            alert('Invalid Password');\r\n            document.getElementById('auth-pass').value = \"\";\r\n        }\r\n    }\r\n    return (\r\n        <form className=\"db-container\" onSubmit={async (e) => await submitForm(e)}>\r\n            <div className=\"db-container-banner\">\r\n                <div className=\"db-container-text-options\">\r\n                    <h3 className=\"db-container-header\" id=\"add-new-ship\">Add a new ship</h3>\r\n                    <h3 className=\"db-container-header non-selected\" id=\"update-existing-ship\">Update Existing Ship</h3>\r\n                    <h3 className=\"db-container-header non-selected\" id=\"delete-existing-ship\">Delete Existing Ship</h3>\r\n                </div>\r\n\r\n                <hr />\r\n            </div>\r\n\r\n            {locked ?\r\n                <div className=\"authorization-block\">\r\n                    <h1 className=\"authorization-header\">Not Authorized</h1>\r\n                    <h4 className=\"authorization-sub-text\">Please enter a valid password to modify the database</h4>\r\n                    <div className=\"password-entry\">\r\n                        <input className=\"authorization-password\" id=\"auth-pass\" type=\"password\" placeholder=\"Password\" />\r\n                        <button className=\"authorization-submit\" onClick={e => passwordCheck(e)}>Submit</button>\r\n                    </div>\r\n\r\n                </div>\r\n                :\r\n                <div className=\"specifications\">\r\n                    {displayType === 'new ship' ? (\r\n                        <Fragment>\r\n                            <input placeholder=\"Nation\" name=\"nation\" value={shipProperties.nation} onChange={e => inputUpdate(e)} />\r\n                            <input placeholder=\"Number of units available\" type=\"number\" name=\"units\" value={shipProperties.units} onChange={e => inputUpdate(e)} />\r\n                            <input placeholder=\"Ship name\" name=\"name\" value={shipProperties.name} onChange={e => inputUpdate(e)} />\r\n                            <input placeholder=\"Points Value/Unit\" name=\"points\" type=\"number\" value={shipProperties.points} onChange={e => inputUpdate(e)} />\r\n                            <input placeholder=\"Ship class\" name=\"class\" value={shipProperties.class} onChange={e => inputUpdate(e)} />\r\n                            <input type=\"file\" name=\"image\" id=\"new-image\" onChange={e => inputUpdate(e)} />\r\n                            <input type=\"submit\" className=\"database-submit\" placeholder=\"submit\" />\r\n                        </Fragment>\r\n                    ) : displayType === 'update ship' ?\r\n                            <Fragment>\r\n                                <label htmlFor=\"ships\">Choose the name of the ship to modify</label>\r\n                                <select id='ship-selector' name=\"ships\" onChange={e => changeTargetShip(e)}>\r\n                                    {allShips.map(ship => (\r\n                                        <option value={ship.name}>{ship.name}</option>\r\n                                    ))}\r\n                                </select>\r\n                                <label for=\"nation\">Nation: </label>\r\n                                <input placeholder=\"Nation\" name=\"nation\" value={existingShip.nation} onChange={e => updateChangeProps(e)} />\r\n                                <label for=\"units\">Number Available: </label>\r\n                                <input placeholder=\"Number available\" name=\"units\" value={existingShip.units} onChange={e => updateChangeProps(e)} />\r\n                                <label for=\"points\">Points: </label>\r\n                                <input placeholder=\"Points\" name=\"points\" value={existingShip.points} onChange={e => updateChangeProps(e)} />\r\n                                <label for=\"class\">Class: </label>\r\n                                <input placeholder=\"Class\" name=\"class\" value={existingShip.class} onChange={e => updateChangeProps(e)} />\r\n                                {existingShip.image ? <img className=\"existing-image\" src={existingShip.image} alt=\"ship image here\" /> : <label>No image for {existingShip.name}</label>}\r\n                                <input placeholder=\"Image\" type=\"file\" name=\"image\" id=\"update-image\" />\r\n                                <input type=\"submit\" className='database-submit' placeholder=\"submit\" />\r\n                            </Fragment>\r\n                            :\r\n                            <Fragment>\r\n                                <label htmlFor=\"ships\">Choose the name of the ship to delete</label>\r\n                                <select id='ship-selector' name=\"ships\" onChange={e => changeDeleteShip(e)}>\r\n                                    {allShips.map(ship => (\r\n                                        <option value={ship.name}>{ship.name}</option>\r\n                                    ))}\r\n                                </select>\r\n                                <input type=\"submit\" className=\"database-submit\" placeholder=\"submit\" />\r\n                            </Fragment>\r\n                    }\r\n                </div>\r\n            }\r\n        </form>\r\n    )\r\n}\r\nconst mapStateToProps = state => ({\r\n    allShips: state.allShips\r\n});\r\n\r\nexport default connect(mapStateToProps, {})(AddtoDB);","//import the actions\r\nimport {\r\n    ADD_SHIP\r\n} from '../actions/types';\r\n\r\nconst initialState = {\r\n    allies: [],\r\n    axis: []\r\n}\r\n\r\nexport default function (state = initialState, action) {\r\n    const { type, payload } = action;\r\n\r\n    switch (type) {\r\n        case ADD_SHIP:\r\n            state.axis = [];\r\n            state.allies = [];\r\n            payload.forEach(ship => {\r\n                if (ship.faction === 'axis') {\r\n                    if (ship.country === 'All') {\r\n                        state = {\r\n                            ...state,\r\n                            axis: ['All']\r\n                        }\r\n                    }\r\n                    else {\r\n                        state = {\r\n                            ...state,\r\n                            axis: [...state.axis, ship.country]\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    if (ship.country === 'All') {\r\n                        state = {\r\n                            ...state,\r\n                            allies: ['All']\r\n                        }\r\n                    }\r\n                    else {\r\n                        state = {\r\n                            ...state,\r\n                            allies: [...state.allies, ship.country]\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n            return state;\r\n        default:\r\n            return {\r\n                ...state\r\n            }\r\n    }\r\n}","import {\r\n    SET_ALLIES_POINTS,\r\n    SET_AXIS_POINTS,\r\n    RESET_POINTS\r\n} from '../actions/types';\r\n\r\nconst initialState = {\r\n    allies: 0,\r\n    axis: 0\r\n};\r\n\r\nexport default function (state = initialState, action) {\r\n    const { payload, type } = action;\r\n    switch (type) {\r\n        case SET_ALLIES_POINTS:\r\n\r\n            return {\r\n                ...state,\r\n                allies: state.allies + payload\r\n            }\r\n        case SET_AXIS_POINTS:\r\n            return {\r\n                ...state,\r\n                axis: state.axis + payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","import {\r\n    LOAD_ONE_SHIP, UPDATE_ONE_SHIP, REMOVE_SHIP, TOGGLE_LOCK, REMOVE_ONE_SHIP\r\n} from '../actions/types';\r\n\r\nconst initialState = {\r\n    axis: [],\r\n    allies: []\r\n};\r\n\r\nexport default function (state = initialState, action) {\r\n    const { type, payload } = action;\r\n\r\n    switch (type) {\r\n        case REMOVE_ONE_SHIP:\r\n            let removeOneShipArr = state;\r\n            console.log(payload.name);\r\n            removeOneShipArr.allies = removeOneShipArr.allies.filter(ship => ship.secretName !== payload.name);\r\n            removeOneShipArr.axis = removeOneShipArr.axis.filter(ship => ship.secretName !== payload.name);\r\n\r\n            if (!removeOneShipArr.allies) {\r\n                removeOneShipArr.allies = [];\r\n            }\r\n            if (!removeOneShipArr.axis) {\r\n                removeOneShipArr.axis = [];\r\n            }\r\n            return removeOneShipArr;\r\n        case REMOVE_SHIP:\r\n            let removeArr = state;\r\n            removeArr.allies = removeArr.allies.filter(ship => ship.locked == true);\r\n            removeArr.axis = removeArr.axis.filter(ship => ship.locked == true);\r\n            if (!removeArr.allies) {\r\n                removeArr.allies = [];\r\n            }\r\n            if (!removeArr.axis) {\r\n                removeArr.axis = [];\r\n            }\r\n            return removeArr;\r\n        case TOGGLE_LOCK:\r\n            let toggleArr = state;\r\n            if (payload.faction == 'allies') {\r\n                toggleArr.allies = toggleArr.allies.map(ship => {\r\n                    if (ship.secretName == payload.ship) {\r\n                        return {\r\n                            ...ship,\r\n                            locked: !ship.locked\r\n                        }\r\n                    }\r\n                    else {\r\n                        return {\r\n                            ...ship\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                toggleArr.axis = toggleArr.axis.map(ship => {\r\n                    if (ship.secretName == payload.ship) {\r\n                        return {\r\n                            ...ship,\r\n                            locked: !ship.locked\r\n                        }\r\n                    }\r\n                    else {\r\n                        return {\r\n                            ...ship\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n            return toggleArr;\r\n        case LOAD_ONE_SHIP:\r\n            if (payload.faction == 'axis') {\r\n                let secretName = payload.ship;\r\n                secretName += ' ' + state.axis.filter(ship => ship.name === payload.ship).length;\r\n                return {\r\n                    ...state,\r\n                    axis: [...state.axis, { name: payload.ship, secretName, locked: false }]\r\n                }\r\n            }\r\n            else {\r\n                let secretName = payload.ship;\r\n                secretName += ' ' + state.allies.filter(ship => ship.name === payload.ship).length;\r\n                return {\r\n                    ...state,\r\n                    allies: [...state.allies, { name: payload.ship, secretName, locked: false }]\r\n                }\r\n            }\r\n\r\n        case UPDATE_ONE_SHIP:\r\n            let stateArr = state;\r\n            stateArr.allies = stateArr.allies.map(ship => {\r\n                if (ship.name !== payload.ship) {\r\n                    return ship\r\n                }\r\n                else {\r\n                    let newQuant = ship.quantity + 1;\r\n                    return {\r\n                        ...ship,\r\n                        quantity: newQuant\r\n                    }\r\n                }\r\n            });\r\n            stateArr.axis = stateArr.axis.map(ship => {\r\n                if (ship.name !== payload.ship) {\r\n                    return ship\r\n                }\r\n                else {\r\n                    let newQuant = ship.quantity + 1;\r\n                    return {\r\n                        ...ship,\r\n                        quantity: newQuant\r\n                    }\r\n                }\r\n            });\r\n\r\n            return stateArr;\r\n        default:\r\n            return state\r\n    }\r\n}","import {\r\n    LOAD_IN_SHIPS\r\n} from '../actions/types';\r\n\r\nconst initialState = [];\r\n\r\nexport default function (state = initialState, action) {\r\n    const { payload, type } = action;\r\n\r\n    switch (type) {\r\n        case LOAD_IN_SHIPS:\r\n            state.push(...payload.allies);\r\n            state.push(...payload.axis);\r\n            return state;\r\n        default:\r\n            return state;\r\n    }\r\n}","//importing the combine reducers ability from redux\r\nimport { combineReducers } from 'redux';\r\n\r\nimport userSelection from './userSelections'\r\nimport points from './points';\r\nimport factionPoints from './factionPoints';\r\nimport shipsInPlay from './shipsInPlay';\r\nimport allShips from './allShips';\r\nexport default combineReducers({\r\n    userSelection,\r\n    points,\r\n    factionPoints,\r\n    shipsInPlay,\r\n    allShips\r\n}); ","import {\r\n    SET_POINTS\r\n} from '../actions/types';\r\n\r\nconst initialState = 0;\r\n\r\nexport default function (state = initialState, action) {\r\n    const { payload, type } = action;\r\n\r\n    switch (type) {\r\n        case SET_POINTS:\r\n            if (payload == '') {\r\n                return 0;\r\n            }\r\n            else {\r\n                return Number(payload);\r\n            }\r\n\r\n            break;\r\n        default:\r\n            return state;\r\n    }\r\n}","//imports from npm\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport thunk from 'redux-thunk';\r\n\r\n//importing the root reducer\r\nimport rootReducer from './reducers';\r\n\r\nconst initialState = {};\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(rootReducer,\r\n    initialState,\r\n    composeWithDevTools(applyMiddleware(...middleware))); //boiler plate to get redux and redux devtools up and running\r\nexport default store;","import React, { useEffect } from 'react';\n\nimport Header from './components/Header';\nimport Points from './components/Points';\n\nimport Allies from './components/pickers/Allies';\nimport Axis from './components/pickers/Axis';\n\nimport AlliesList from './components/lists/AlliesList';\nimport AxisList from './components/lists/AxisList';\n\nimport AddtoDB from './components/AddtoDB';\n\n\nimport './app.css';\n\n\nimport { Provider } from 'react-redux';\nimport store from './store';\nfunction App() {\n\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <Header />\n        <div className=\"game-preference-wrapper\">\n          <Points />\n          <Allies />\n          <Axis />\n        </div>\n        <div className=\"card-results\">\n          <AlliesList />\n          <AxisList />\n        </div>\n        <AddtoDB />\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nReactDOM.render(\n  <App />\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}